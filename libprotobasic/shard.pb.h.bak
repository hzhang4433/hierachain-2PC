// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shard.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_shard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shard_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shard_2eproto;
namespace protos {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class BlockHeader;
class BlockHeaderDefaultTypeInternal;
extern BlockHeaderDefaultTypeInternal _BlockHeader_default_instance_;
class CheckPoint;
class CheckPointDefaultTypeInternal;
extern CheckPointDefaultTypeInternal _CheckPoint_default_instance_;
class CommitState;
class CommitStateDefaultTypeInternal;
extern CommitStateDefaultTypeInternal _CommitState_default_instance_;
class CommittedRLPWithReadSet;
class CommittedRLPWithReadSetDefaultTypeInternal;
extern CommittedRLPWithReadSetDefaultTypeInternal _CommittedRLPWithReadSet_default_instance_;
class DAGWithReadSet;
class DAGWithReadSetDefaultTypeInternal;
extern DAGWithReadSetDefaultTypeInternal _DAGWithReadSet_default_instance_;
class KV;
class KVDefaultTypeInternal;
extern KVDefaultTypeInternal _KV_default_instance_;
class RLPWithReadSet;
class RLPWithReadSetDefaultTypeInternal;
extern RLPWithReadSetDefaultTypeInternal _RLPWithReadSet_default_instance_;
class ReadSet;
class ReadSetDefaultTypeInternal;
extern ReadSetDefaultTypeInternal _ReadSet_default_instance_;
class SubPreCommitedDisTx;
class SubPreCommitedDisTxDefaultTypeInternal;
extern SubPreCommitedDisTxDefaultTypeInternal _SubPreCommitedDisTx_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TxWithReadSet;
class TxWithReadSetDefaultTypeInternal;
extern TxWithReadSetDefaultTypeInternal _TxWithReadSet_default_instance_;
}  // namespace protos
PROTOBUF_NAMESPACE_OPEN
template<> ::protos::Block* Arena::CreateMaybeMessage<::protos::Block>(Arena*);
template<> ::protos::BlockHeader* Arena::CreateMaybeMessage<::protos::BlockHeader>(Arena*);
template<> ::protos::CheckPoint* Arena::CreateMaybeMessage<::protos::CheckPoint>(Arena*);
template<> ::protos::CommitState* Arena::CreateMaybeMessage<::protos::CommitState>(Arena*);
template<> ::protos::CommittedRLPWithReadSet* Arena::CreateMaybeMessage<::protos::CommittedRLPWithReadSet>(Arena*);
template<> ::protos::DAGWithReadSet* Arena::CreateMaybeMessage<::protos::DAGWithReadSet>(Arena*);
template<> ::protos::KV* Arena::CreateMaybeMessage<::protos::KV>(Arena*);
template<> ::protos::RLPWithReadSet* Arena::CreateMaybeMessage<::protos::RLPWithReadSet>(Arena*);
template<> ::protos::ReadSet* Arena::CreateMaybeMessage<::protos::ReadSet>(Arena*);
template<> ::protos::SubPreCommitedDisTx* Arena::CreateMaybeMessage<::protos::SubPreCommitedDisTx>(Arena*);
template<> ::protos::Transaction* Arena::CreateMaybeMessage<::protos::Transaction>(Arena*);
template<> ::protos::TxWithReadSet* Arena::CreateMaybeMessage<::protos::TxWithReadSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protos {

// ===================================================================

class SubPreCommitedDisTx :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.SubPreCommitedDisTx) */ {
 public:
  SubPreCommitedDisTx();
  virtual ~SubPreCommitedDisTx();

  SubPreCommitedDisTx(const SubPreCommitedDisTx& from);
  SubPreCommitedDisTx(SubPreCommitedDisTx&& from) noexcept
    : SubPreCommitedDisTx() {
    *this = ::std::move(from);
  }

  inline SubPreCommitedDisTx& operator=(const SubPreCommitedDisTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubPreCommitedDisTx& operator=(SubPreCommitedDisTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubPreCommitedDisTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubPreCommitedDisTx* internal_default_instance() {
    return reinterpret_cast<const SubPreCommitedDisTx*>(
               &_SubPreCommitedDisTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubPreCommitedDisTx& a, SubPreCommitedDisTx& b) {
    a.Swap(&b);
  }
  inline void Swap(SubPreCommitedDisTx* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubPreCommitedDisTx* New() const final {
    return CreateMaybeMessage<SubPreCommitedDisTx>(nullptr);
  }

  SubPreCommitedDisTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubPreCommitedDisTx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubPreCommitedDisTx& from);
  void MergeFrom(const SubPreCommitedDisTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubPreCommitedDisTx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.SubPreCommitedDisTx";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shard_2eproto);
    return ::descriptor_table_shard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubTxRlpFieldNumber = 1,
    kContractAddressFieldNumber = 2,
  };
  // bytes subTxRlp = 1;
  void clear_subtxrlp();
  const std::string& subtxrlp() const;
  void set_subtxrlp(const std::string& value);
  void set_subtxrlp(std::string&& value);
  void set_subtxrlp(const char* value);
  void set_subtxrlp(const void* value, size_t size);
  std::string* mutable_subtxrlp();
  std::string* release_subtxrlp();
  void set_allocated_subtxrlp(std::string* subtxrlp);
  private:
  const std::string& _internal_subtxrlp() const;
  void _internal_set_subtxrlp(const std::string& value);
  std::string* _internal_mutable_subtxrlp();
  public:

  // bytes contractAddress = 2;
  void clear_contractaddress();
  const std::string& contractaddress() const;
  void set_contractaddress(const std::string& value);
  void set_contractaddress(std::string&& value);
  void set_contractaddress(const char* value);
  void set_contractaddress(const void* value, size_t size);
  std::string* mutable_contractaddress();
  std::string* release_contractaddress();
  void set_allocated_contractaddress(std::string* contractaddress);
  private:
  const std::string& _internal_contractaddress() const;
  void _internal_set_contractaddress(const std::string& value);
  std::string* _internal_mutable_contractaddress();
  public:

  // @@protoc_insertion_point(class_scope:protos.SubPreCommitedDisTx)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtxrlp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shard_2eproto;
};
// -------------------------------------------------------------------

class RLPWithReadSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.RLPWithReadSet) */ {
 public:
  RLPWithReadSet();
  virtual ~RLPWithReadSet();

  RLPWithReadSet(const RLPWithReadSet& from);
  RLPWithReadSet(RLPWithReadSet&& from) noexcept
    : RLPWithReadSet() {
    *this = ::std::move(from);
  }

  inline RLPWithReadSet& operator=(const RLPWithReadSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline RLPWithReadSet& operator=(RLPWithReadSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RLPWithReadSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RLPWithReadSet* internal_default_instance() {
    return reinterpret_cast<const RLPWithReadSet*>(
               &_RLPWithReadSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RLPWithReadSet& a, RLPWithReadSet& b) {
    a.Swap(&b);
  }
  inline void Swap(RLPWithReadSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RLPWithReadSet* New() const final {
    return CreateMaybeMessage<RLPWithReadSet>(nullptr);
  }

  RLPWithReadSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RLPWithReadSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RLPWithReadSet& from);
  void MergeFrom(const RLPWithReadSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RLPWithReadSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.RLPWithReadSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shard_2eproto);
    return ::descriptor_table_shard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubTxRlpFieldNumber = 1,
    kReadsetFieldNumber = 2,
    kContractAddressFieldNumber = 3,
  };
  // bytes subTxRlp = 1;
  void clear_subtxrlp();
  const std::string& subtxrlp() const;
  void set_subtxrlp(const std::string& value);
  void set_subtxrlp(std::string&& value);
  void set_subtxrlp(const char* value);
  void set_subtxrlp(const void* value, size_t size);
  std::string* mutable_subtxrlp();
  std::string* release_subtxrlp();
  void set_allocated_subtxrlp(std::string* subtxrlp);
  private:
  const std::string& _internal_subtxrlp() const;
  void _internal_set_subtxrlp(const std::string& value);
  std::string* _internal_mutable_subtxrlp();
  public:

  // bytes readset = 2;
  void clear_readset();
  const std::string& readset() const;
  void set_readset(const std::string& value);
  void set_readset(std::string&& value);
  void set_readset(const char* value);
  void set_readset(const void* value, size_t size);
  std::string* mutable_readset();
  std::string* release_readset();
  void set_allocated_readset(std::string* readset);
  private:
  const std::string& _internal_readset() const;
  void _internal_set_readset(const std::string& value);
  std::string* _internal_mutable_readset();
  public:

  // bytes contractAddress = 3;
  void clear_contractaddress();
  const std::string& contractaddress() const;
  void set_contractaddress(const std::string& value);
  void set_contractaddress(std::string&& value);
  void set_contractaddress(const char* value);
  void set_contractaddress(const void* value, size_t size);
  std::string* mutable_contractaddress();
  std::string* release_contractaddress();
  void set_allocated_contractaddress(std::string* contractaddress);
  private:
  const std::string& _internal_contractaddress() const;
  void _internal_set_contractaddress(const std::string& value);
  std::string* _internal_mutable_contractaddress();
  public:

  // @@protoc_insertion_point(class_scope:protos.RLPWithReadSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtxrlp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr readset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shard_2eproto;
};
// -------------------------------------------------------------------

class CommittedRLPWithReadSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.CommittedRLPWithReadSet) */ {
 public:
  CommittedRLPWithReadSet();
  virtual ~CommittedRLPWithReadSet();

  CommittedRLPWithReadSet(const CommittedRLPWithReadSet& from);
  CommittedRLPWithReadSet(CommittedRLPWithReadSet&& from) noexcept
    : CommittedRLPWithReadSet() {
    *this = ::std::move(from);
  }

  inline CommittedRLPWithReadSet& operator=(const CommittedRLPWithReadSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommittedRLPWithReadSet& operator=(CommittedRLPWithReadSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommittedRLPWithReadSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommittedRLPWithReadSet* internal_default_instance() {
    return reinterpret_cast<const CommittedRLPWithReadSet*>(
               &_CommittedRLPWithReadSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommittedRLPWithReadSet& a, CommittedRLPWithReadSet& b) {
    a.Swap(&b);
  }
  inline void Swap(CommittedRLPWithReadSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommittedRLPWithReadSet* New() const final {
    return CreateMaybeMessage<CommittedRLPWithReadSet>(nullptr);
  }

  CommittedRLPWithReadSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommittedRLPWithReadSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommittedRLPWithReadSet& from);
  void MergeFrom(const CommittedRLPWithReadSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommittedRLPWithReadSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.CommittedRLPWithReadSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shard_2eproto);
    return ::descriptor_table_shard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubTxRlpFieldNumber = 1,
    kReadsetFieldNumber = 2,
    kContractAddressFieldNumber = 3,
  };
  // bytes subTxRlp = 1;
  void clear_subtxrlp();
  const std::string& subtxrlp() const;
  void set_subtxrlp(const std::string& value);
  void set_subtxrlp(std::string&& value);
  void set_subtxrlp(const char* value);
  void set_subtxrlp(const void* value, size_t size);
  std::string* mutable_subtxrlp();
  std::string* release_subtxrlp();
  void set_allocated_subtxrlp(std::string* subtxrlp);
  private:
  const std::string& _internal_subtxrlp() const;
  void _internal_set_subtxrlp(const std::string& value);
  std::string* _internal_mutable_subtxrlp();
  public:

  // bytes readset = 2;
  void clear_readset();
  const std::string& readset() const;
  void set_readset(const std::string& value);
  void set_readset(std::string&& value);
  void set_readset(const char* value);
  void set_readset(const void* value, size_t size);
  std::string* mutable_readset();
  std::string* release_readset();
  void set_allocated_readset(std::string* readset);
  private:
  const std::string& _internal_readset() const;
  void _internal_set_readset(const std::string& value);
  std::string* _internal_mutable_readset();
  public:

  // bytes contractAddress = 3;
  void clear_contractaddress();
  const std::string& contractaddress() const;
  void set_contractaddress(const std::string& value);
  void set_contractaddress(std::string&& value);
  void set_contractaddress(const char* value);
  void set_contractaddress(const void* value, size_t size);
  std::string* mutable_contractaddress();
  std::string* release_contractaddress();
  void set_allocated_contractaddress(std::string* contractaddress);
  private:
  const std::string& _internal_contractaddress() const;
  void _internal_set_contractaddress(const std::string& value);
  std::string* _internal_mutable_contractaddress();
  public:

  // @@protoc_insertion_point(class_scope:protos.CommittedRLPWithReadSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtxrlp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr readset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shard_2eproto;
};
// -------------------------------------------------------------------

class KV :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.KV) */ {
 public:
  KV();
  virtual ~KV();

  KV(const KV& from);
  KV(KV&& from) noexcept
    : KV() {
    *this = ::std::move(from);
  }

  inline KV& operator=(const KV& from) {
    CopyFrom(from);
    return *this;
  }
  inline KV& operator=(KV&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KV* internal_default_instance() {
    return reinterpret_cast<const KV*>(
               &_KV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KV& a, KV& b) {
    a.Swap(&b);
  }
  inline void Swap(KV* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KV* New() const final {
    return CreateMaybeMessage<KV>(nullptr);
  }

  KV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KV& from);
  void MergeFrom(const KV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.KV";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shard_2eproto);
    return ::descriptor_table_shard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:protos.KV)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shard_2eproto;
};
// -------------------------------------------------------------------

class Block :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.Block";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shard_2eproto);
    return ::descriptor_table_shard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 2,
    kBlockHeaderFieldNumber = 1,
  };
  // repeated .protos.Transaction transactions = 2;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::protos::Transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::Transaction >*
      mutable_transactions();
  private:
  const ::protos::Transaction& _internal_transactions(int index) const;
  ::protos::Transaction* _internal_add_transactions();
  public:
  const ::protos::Transaction& transactions(int index) const;
  ::protos::Transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::Transaction >&
      transactions() const;

  // .protos.BlockHeader blockHeader = 1;
  bool has_blockheader() const;
  private:
  bool _internal_has_blockheader() const;
  public:
  void clear_blockheader();
  const ::protos::BlockHeader& blockheader() const;
  ::protos::BlockHeader* release_blockheader();
  ::protos::BlockHeader* mutable_blockheader();
  void set_allocated_blockheader(::protos::BlockHeader* blockheader);
  private:
  const ::protos::BlockHeader& _internal_blockheader() const;
  ::protos::BlockHeader* _internal_mutable_blockheader();
  public:

  // @@protoc_insertion_point(class_scope:protos.Block)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::Transaction > transactions_;
  ::protos::BlockHeader* blockheader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shard_2eproto;
};
// -------------------------------------------------------------------

class DAGWithReadSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.DAGWithReadSet) */ {
 public:
  DAGWithReadSet();
  virtual ~DAGWithReadSet();

  DAGWithReadSet(const DAGWithReadSet& from);
  DAGWithReadSet(DAGWithReadSet&& from) noexcept
    : DAGWithReadSet() {
    *this = ::std::move(from);
  }

  inline DAGWithReadSet& operator=(const DAGWithReadSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DAGWithReadSet& operator=(DAGWithReadSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DAGWithReadSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DAGWithReadSet* internal_default_instance() {
    return reinterpret_cast<const DAGWithReadSet*>(
               &_DAGWithReadSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DAGWithReadSet& a, DAGWithReadSet& b) {
    a.Swap(&b);
  }
  inline void Swap(DAGWithReadSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DAGWithReadSet* New() const final {
    return CreateMaybeMessage<DAGWithReadSet>(nullptr);
  }

  DAGWithReadSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DAGWithReadSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DAGWithReadSet& from);
  void MergeFrom(const DAGWithReadSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DAGWithReadSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.DAGWithReadSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shard_2eproto);
    return ::descriptor_table_shard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 4,
    kReadSetFieldNumber = 5,
    kBlockNumFieldNumber = 1,
    kDagIdFieldNumber = 2,
    kShardIdFieldNumber = 3,
    kReadSetNumFieldNumber = 6,
  };
  // repeated bytes transactions = 4;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  const std::string& transactions(int index) const;
  std::string* mutable_transactions(int index);
  void set_transactions(int index, const std::string& value);
  void set_transactions(int index, std::string&& value);
  void set_transactions(int index, const char* value);
  void set_transactions(int index, const void* value, size_t size);
  std::string* add_transactions();
  void add_transactions(const std::string& value);
  void add_transactions(std::string&& value);
  void add_transactions(const char* value);
  void add_transactions(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& transactions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_transactions();
  private:
  const std::string& _internal_transactions(int index) const;
  std::string* _internal_add_transactions();
  public:

  // repeated .protos.KV readSet = 5;
  int readset_size() const;
  private:
  int _internal_readset_size() const;
  public:
  void clear_readset();
  ::protos::KV* mutable_readset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::KV >*
      mutable_readset();
  private:
  const ::protos::KV& _internal_readset(int index) const;
  ::protos::KV* _internal_add_readset();
  public:
  const ::protos::KV& readset(int index) const;
  ::protos::KV* add_readset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::KV >&
      readset() const;

  // uint64 blockNum = 1;
  void clear_blocknum();
  ::PROTOBUF_NAMESPACE_ID::uint64 blocknum() const;
  void set_blocknum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blocknum() const;
  void _internal_set_blocknum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 dagId = 2;
  void clear_dagid();
  ::PROTOBUF_NAMESPACE_ID::uint64 dagid() const;
  void set_dagid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dagid() const;
  void _internal_set_dagid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 shardId = 3;
  void clear_shardid();
  ::PROTOBUF_NAMESPACE_ID::uint64 shardid() const;
  void set_shardid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shardid() const;
  void _internal_set_shardid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 readSetNum = 6;
  void clear_readsetnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 readsetnum() const;
  void set_readsetnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_readsetnum() const;
  void _internal_set_readsetnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protos.DAGWithReadSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> transactions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::KV > readset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blocknum_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dagid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shardid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 readsetnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shard_2eproto;
};
// -------------------------------------------------------------------

class Transaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.Transaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shard_2eproto);
    return ::descriptor_table_shard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadersFieldNumber = 6,
    kWritersFieldNumber = 7,
    kReadSetFieldNumber = 8,
    kReadWriteSetFieldNumber = 9,
    kLastStateInDAGFieldNumber = 12,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kValueFieldNumber = 4,
    kDataFieldNumber = 5,
    kTxIdFieldNumber = 1,
    kShardIdFieldNumber = 10,
    kDAGIdFieldNumber = 11,
  };
  // repeated uint64 readers = 6;
  int readers_size() const;
  private:
  int _internal_readers_size() const;
  public:
  void clear_readers();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_readers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_readers() const;
  void _internal_add_readers(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_readers();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 readers(int index) const;
  void set_readers(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_readers(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      readers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_readers();

  // repeated uint64 writers = 7;
  int writers_size() const;
  private:
  int _internal_writers_size() const;
  public:
  void clear_writers();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_writers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_writers() const;
  void _internal_add_writers(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_writers();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 writers(int index) const;
  void set_writers(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_writers(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      writers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_writers();

  // repeated bytes read_set = 8;
  int read_set_size() const;
  private:
  int _internal_read_set_size() const;
  public:
  void clear_read_set();
  const std::string& read_set(int index) const;
  std::string* mutable_read_set(int index);
  void set_read_set(int index, const std::string& value);
  void set_read_set(int index, std::string&& value);
  void set_read_set(int index, const char* value);
  void set_read_set(int index, const void* value, size_t size);
  std::string* add_read_set();
  void add_read_set(const std::string& value);
  void add_read_set(std::string&& value);
  void add_read_set(const char* value);
  void add_read_set(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& read_set() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_read_set();
  private:
  const std::string& _internal_read_set(int index) const;
  std::string* _internal_add_read_set();
  public:

  // repeated bytes read_write_set = 9;
  int read_write_set_size() const;
  private:
  int _internal_read_write_set_size() const;
  public:
  void clear_read_write_set();
  const std::string& read_write_set(int index) const;
  std::string* mutable_read_write_set(int index);
  void set_read_write_set(int index, const std::string& value);
  void set_read_write_set(int index, std::string&& value);
  void set_read_write_set(int index, const char* value);
  void set_read_write_set(int index, const void* value, size_t size);
  std::string* add_read_write_set();
  void add_read_write_set(const std::string& value);
  void add_read_write_set(std::string&& value);
  void add_read_write_set(const char* value);
  void add_read_write_set(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& read_write_set() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_read_write_set();
  private:
  const std::string& _internal_read_write_set(int index) const;
  std::string* _internal_add_read_write_set();
  public:

  // repeated bytes lastStateInDAG = 12;
  int laststateindag_size() const;
  private:
  int _internal_laststateindag_size() const;
  public:
  void clear_laststateindag();
  const std::string& laststateindag(int index) const;
  std::string* mutable_laststateindag(int index);
  void set_laststateindag(int index, const std::string& value);
  void set_laststateindag(int index, std::string&& value);
  void set_laststateindag(int index, const char* value);
  void set_laststateindag(int index, const void* value, size_t size);
  std::string* add_laststateindag();
  void add_laststateindag(const std::string& value);
  void add_laststateindag(std::string&& value);
  void add_laststateindag(const char* value);
  void add_laststateindag(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& laststateindag() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_laststateindag();
  private:
  const std::string& _internal_laststateindag(int index) const;
  std::string* _internal_add_laststateindag();
  public:

  // bytes from = 2;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes to = 3;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes value = 4;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 txId = 1;
  void clear_txid();
  ::PROTOBUF_NAMESPACE_ID::uint64 txid() const;
  void set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txid() const;
  void _internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 shardId = 10;
  void clear_shardid();
  ::PROTOBUF_NAMESPACE_ID::uint64 shardid() const;
  void set_shardid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shardid() const;
  void _internal_set_shardid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 DAGId = 11;
  void clear_dagid();
  ::PROTOBUF_NAMESPACE_ID::uint64 dagid() const;
  void set_dagid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dagid() const;
  void _internal_set_dagid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protos.Transaction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > readers_;
  mutable std::atomic<int> _readers_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > writers_;
  mutable std::atomic<int> _writers_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> read_set_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> read_write_set_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> laststateindag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shardid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dagid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shard_2eproto;
};
// -------------------------------------------------------------------

class TxWithReadSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.TxWithReadSet) */ {
 public:
  TxWithReadSet();
  virtual ~TxWithReadSet();

  TxWithReadSet(const TxWithReadSet& from);
  TxWithReadSet(TxWithReadSet&& from) noexcept
    : TxWithReadSet() {
    *this = ::std::move(from);
  }

  inline TxWithReadSet& operator=(const TxWithReadSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxWithReadSet& operator=(TxWithReadSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxWithReadSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxWithReadSet* internal_default_instance() {
    return reinterpret_cast<const TxWithReadSet*>(
               &_TxWithReadSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TxWithReadSet& a, TxWithReadSet& b) {
    a.Swap(&b);
  }
  inline void Swap(TxWithReadSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxWithReadSet* New() const final {
    return CreateMaybeMessage<TxWithReadSet>(nullptr);
  }

  TxWithReadSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxWithReadSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxWithReadSet& from);
  void MergeFrom(const TxWithReadSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxWithReadSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.TxWithReadSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shard_2eproto);
    return ::descriptor_table_shard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadSetFieldNumber = 3,
    kTxIdFieldNumber = 1,
    kDagIdFieldNumber = 2,
  };
  // repeated .protos.KV readSet = 3;
  int readset_size() const;
  private:
  int _internal_readset_size() const;
  public:
  void clear_readset();
  ::protos::KV* mutable_readset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::KV >*
      mutable_readset();
  private:
  const ::protos::KV& _internal_readset(int index) const;
  ::protos::KV* _internal_add_readset();
  public:
  const ::protos::KV& readset(int index) const;
  ::protos::KV* add_readset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::KV >&
      readset() const;

  // uint64 txId = 1;
  void clear_txid();
  ::PROTOBUF_NAMESPACE_ID::uint64 txid() const;
  void set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txid() const;
  void _internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 dagId = 2;
  void clear_dagid();
  ::PROTOBUF_NAMESPACE_ID::uint64 dagid() const;
  void set_dagid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dagid() const;
  void _internal_set_dagid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protos.TxWithReadSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::KV > readset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dagid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shard_2eproto;
};
// -------------------------------------------------------------------

class CheckPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.CheckPoint) */ {
 public:
  CheckPoint();
  virtual ~CheckPoint();

  CheckPoint(const CheckPoint& from);
  CheckPoint(CheckPoint&& from) noexcept
    : CheckPoint() {
    *this = ::std::move(from);
  }

  inline CheckPoint& operator=(const CheckPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckPoint& operator=(CheckPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckPoint* internal_default_instance() {
    return reinterpret_cast<const CheckPoint*>(
               &_CheckPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CheckPoint& a, CheckPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckPoint* New() const final {
    return CreateMaybeMessage<CheckPoint>(nullptr);
  }

  CheckPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckPoint& from);
  void MergeFrom(const CheckPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.CheckPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shard_2eproto);
    return ::descriptor_table_shard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateRootFieldNumber = 2,
    kTransactionsRootFieldNumber = 3,
    kCheckpointIdFieldNumber = 1,
  };
  // bytes stateRoot = 2;
  void clear_stateroot();
  const std::string& stateroot() const;
  void set_stateroot(const std::string& value);
  void set_stateroot(std::string&& value);
  void set_stateroot(const char* value);
  void set_stateroot(const void* value, size_t size);
  std::string* mutable_stateroot();
  std::string* release_stateroot();
  void set_allocated_stateroot(std::string* stateroot);
  private:
  const std::string& _internal_stateroot() const;
  void _internal_set_stateroot(const std::string& value);
  std::string* _internal_mutable_stateroot();
  public:

  // bytes transactionsRoot = 3;
  void clear_transactionsroot();
  const std::string& transactionsroot() const;
  void set_transactionsroot(const std::string& value);
  void set_transactionsroot(std::string&& value);
  void set_transactionsroot(const char* value);
  void set_transactionsroot(const void* value, size_t size);
  std::string* mutable_transactionsroot();
  std::string* release_transactionsroot();
  void set_allocated_transactionsroot(std::string* transactionsroot);
  private:
  const std::string& _internal_transactionsroot() const;
  void _internal_set_transactionsroot(const std::string& value);
  std::string* _internal_mutable_transactionsroot();
  public:

  // uint64 checkpoint_id = 1;
  void clear_checkpoint_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 checkpoint_id() const;
  void set_checkpoint_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_checkpoint_id() const;
  void _internal_set_checkpoint_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protos.CheckPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stateroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transactionsroot_;
  ::PROTOBUF_NAMESPACE_ID::uint64 checkpoint_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shard_2eproto;
};
// -------------------------------------------------------------------

class ReadSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ReadSet) */ {
 public:
  ReadSet();
  virtual ~ReadSet();

  ReadSet(const ReadSet& from);
  ReadSet(ReadSet&& from) noexcept
    : ReadSet() {
    *this = ::std::move(from);
  }

  inline ReadSet& operator=(const ReadSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadSet& operator=(ReadSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadSet* internal_default_instance() {
    return reinterpret_cast<const ReadSet*>(
               &_ReadSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReadSet& a, ReadSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadSet* New() const final {
    return CreateMaybeMessage<ReadSet>(nullptr);
  }

  ReadSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadSet& from);
  void MergeFrom(const ReadSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ReadSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shard_2eproto);
    return ::descriptor_table_shard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadSetFieldNumber = 2,
    kTxIdxFieldNumber = 1,
  };
  // repeated .protos.KV read_set = 2;
  int read_set_size() const;
  private:
  int _internal_read_set_size() const;
  public:
  void clear_read_set();
  ::protos::KV* mutable_read_set(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::KV >*
      mutable_read_set();
  private:
  const ::protos::KV& _internal_read_set(int index) const;
  ::protos::KV* _internal_add_read_set();
  public:
  const ::protos::KV& read_set(int index) const;
  ::protos::KV* add_read_set();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::KV >&
      read_set() const;

  // uint64 tx_idx = 1;
  void clear_tx_idx();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_idx() const;
  void set_tx_idx(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_idx() const;
  void _internal_set_tx_idx(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protos.ReadSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::KV > read_set_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shard_2eproto;
};
// -------------------------------------------------------------------

class CommitState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.CommitState) */ {
 public:
  CommitState();
  virtual ~CommitState();

  CommitState(const CommitState& from);
  CommitState(CommitState&& from) noexcept
    : CommitState() {
    *this = ::std::move(from);
  }

  inline CommitState& operator=(const CommitState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitState& operator=(CommitState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommitState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitState* internal_default_instance() {
    return reinterpret_cast<const CommitState*>(
               &_CommitState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CommitState& a, CommitState& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommitState* New() const final {
    return CreateMaybeMessage<CommitState>(nullptr);
  }

  CommitState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommitState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommitState& from);
  void MergeFrom(const CommitState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.CommitState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shard_2eproto);
    return ::descriptor_table_shard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockidFieldNumber = 1,
  };
  // uint64 blockid = 1;
  void clear_blockid();
  ::PROTOBUF_NAMESPACE_ID::uint64 blockid() const;
  void set_blockid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blockid() const;
  void _internal_set_blockid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protos.CommitState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blockid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shard_2eproto;
};
// -------------------------------------------------------------------

class BlockHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.BlockHeader) */ {
 public:
  BlockHeader();
  virtual ~BlockHeader();

  BlockHeader(const BlockHeader& from);
  BlockHeader(BlockHeader&& from) noexcept
    : BlockHeader() {
    *this = ::std::move(from);
  }

  inline BlockHeader& operator=(const BlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockHeader& operator=(BlockHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockHeader* internal_default_instance() {
    return reinterpret_cast<const BlockHeader*>(
               &_BlockHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BlockHeader& a, BlockHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockHeader* New() const final {
    return CreateMaybeMessage<BlockHeader>(nullptr);
  }

  BlockHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockHeader& from);
  void MergeFrom(const BlockHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.BlockHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shard_2eproto);
    return ::descriptor_table_shard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentHashFieldNumber = 1,
    kStateRootFieldNumber = 2,
    kTransactionsRootFieldNumber = 3,
    kGasLimitFieldNumber = 5,
    kGasUsedFieldNumber = 6,
    kSignatureFieldNumber = 8,
    kNumberFieldNumber = 4,
    kTimestampFieldNumber = 7,
    kShardIdFieldNumber = 9,
  };
  // bytes parentHash = 1;
  void clear_parenthash();
  const std::string& parenthash() const;
  void set_parenthash(const std::string& value);
  void set_parenthash(std::string&& value);
  void set_parenthash(const char* value);
  void set_parenthash(const void* value, size_t size);
  std::string* mutable_parenthash();
  std::string* release_parenthash();
  void set_allocated_parenthash(std::string* parenthash);
  private:
  const std::string& _internal_parenthash() const;
  void _internal_set_parenthash(const std::string& value);
  std::string* _internal_mutable_parenthash();
  public:

  // bytes stateRoot = 2;
  void clear_stateroot();
  const std::string& stateroot() const;
  void set_stateroot(const std::string& value);
  void set_stateroot(std::string&& value);
  void set_stateroot(const char* value);
  void set_stateroot(const void* value, size_t size);
  std::string* mutable_stateroot();
  std::string* release_stateroot();
  void set_allocated_stateroot(std::string* stateroot);
  private:
  const std::string& _internal_stateroot() const;
  void _internal_set_stateroot(const std::string& value);
  std::string* _internal_mutable_stateroot();
  public:

  // bytes transactionsRoot = 3;
  void clear_transactionsroot();
  const std::string& transactionsroot() const;
  void set_transactionsroot(const std::string& value);
  void set_transactionsroot(std::string&& value);
  void set_transactionsroot(const char* value);
  void set_transactionsroot(const void* value, size_t size);
  std::string* mutable_transactionsroot();
  std::string* release_transactionsroot();
  void set_allocated_transactionsroot(std::string* transactionsroot);
  private:
  const std::string& _internal_transactionsroot() const;
  void _internal_set_transactionsroot(const std::string& value);
  std::string* _internal_mutable_transactionsroot();
  public:

  // bytes gasLimit = 5;
  void clear_gaslimit();
  const std::string& gaslimit() const;
  void set_gaslimit(const std::string& value);
  void set_gaslimit(std::string&& value);
  void set_gaslimit(const char* value);
  void set_gaslimit(const void* value, size_t size);
  std::string* mutable_gaslimit();
  std::string* release_gaslimit();
  void set_allocated_gaslimit(std::string* gaslimit);
  private:
  const std::string& _internal_gaslimit() const;
  void _internal_set_gaslimit(const std::string& value);
  std::string* _internal_mutable_gaslimit();
  public:

  // bytes gasUsed = 6;
  void clear_gasused();
  const std::string& gasused() const;
  void set_gasused(const std::string& value);
  void set_gasused(std::string&& value);
  void set_gasused(const char* value);
  void set_gasused(const void* value, size_t size);
  std::string* mutable_gasused();
  std::string* release_gasused();
  void set_allocated_gasused(std::string* gasused);
  private:
  const std::string& _internal_gasused() const;
  void _internal_set_gasused(const std::string& value);
  std::string* _internal_mutable_gasused();
  public:

  // bytes signature = 8;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // uint64 number = 4;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 7;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 shardId = 9;
  void clear_shardid();
  ::PROTOBUF_NAMESPACE_ID::uint64 shardid() const;
  void set_shardid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shardid() const;
  void _internal_set_shardid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protos.BlockHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parenthash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stateroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transactionsroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gaslimit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gasused_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::uint64 number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shardid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubPreCommitedDisTx

// bytes subTxRlp = 1;
inline void SubPreCommitedDisTx::clear_subtxrlp() {
  subtxrlp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SubPreCommitedDisTx::subtxrlp() const {
  // @@protoc_insertion_point(field_get:protos.SubPreCommitedDisTx.subTxRlp)
  return _internal_subtxrlp();
}
inline void SubPreCommitedDisTx::set_subtxrlp(const std::string& value) {
  _internal_set_subtxrlp(value);
  // @@protoc_insertion_point(field_set:protos.SubPreCommitedDisTx.subTxRlp)
}
inline std::string* SubPreCommitedDisTx::mutable_subtxrlp() {
  // @@protoc_insertion_point(field_mutable:protos.SubPreCommitedDisTx.subTxRlp)
  return _internal_mutable_subtxrlp();
}
inline const std::string& SubPreCommitedDisTx::_internal_subtxrlp() const {
  return subtxrlp_.GetNoArena();
}
inline void SubPreCommitedDisTx::_internal_set_subtxrlp(const std::string& value) {
  
  subtxrlp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SubPreCommitedDisTx::set_subtxrlp(std::string&& value) {
  
  subtxrlp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.SubPreCommitedDisTx.subTxRlp)
}
inline void SubPreCommitedDisTx::set_subtxrlp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subtxrlp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.SubPreCommitedDisTx.subTxRlp)
}
inline void SubPreCommitedDisTx::set_subtxrlp(const void* value, size_t size) {
  
  subtxrlp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.SubPreCommitedDisTx.subTxRlp)
}
inline std::string* SubPreCommitedDisTx::_internal_mutable_subtxrlp() {
  
  return subtxrlp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubPreCommitedDisTx::release_subtxrlp() {
  // @@protoc_insertion_point(field_release:protos.SubPreCommitedDisTx.subTxRlp)
  
  return subtxrlp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubPreCommitedDisTx::set_allocated_subtxrlp(std::string* subtxrlp) {
  if (subtxrlp != nullptr) {
    
  } else {
    
  }
  subtxrlp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subtxrlp);
  // @@protoc_insertion_point(field_set_allocated:protos.SubPreCommitedDisTx.subTxRlp)
}

// bytes contractAddress = 2;
inline void SubPreCommitedDisTx::clear_contractaddress() {
  contractaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SubPreCommitedDisTx::contractaddress() const {
  // @@protoc_insertion_point(field_get:protos.SubPreCommitedDisTx.contractAddress)
  return _internal_contractaddress();
}
inline void SubPreCommitedDisTx::set_contractaddress(const std::string& value) {
  _internal_set_contractaddress(value);
  // @@protoc_insertion_point(field_set:protos.SubPreCommitedDisTx.contractAddress)
}
inline std::string* SubPreCommitedDisTx::mutable_contractaddress() {
  // @@protoc_insertion_point(field_mutable:protos.SubPreCommitedDisTx.contractAddress)
  return _internal_mutable_contractaddress();
}
inline const std::string& SubPreCommitedDisTx::_internal_contractaddress() const {
  return contractaddress_.GetNoArena();
}
inline void SubPreCommitedDisTx::_internal_set_contractaddress(const std::string& value) {
  
  contractaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SubPreCommitedDisTx::set_contractaddress(std::string&& value) {
  
  contractaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.SubPreCommitedDisTx.contractAddress)
}
inline void SubPreCommitedDisTx::set_contractaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.SubPreCommitedDisTx.contractAddress)
}
inline void SubPreCommitedDisTx::set_contractaddress(const void* value, size_t size) {
  
  contractaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.SubPreCommitedDisTx.contractAddress)
}
inline std::string* SubPreCommitedDisTx::_internal_mutable_contractaddress() {
  
  return contractaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubPreCommitedDisTx::release_contractaddress() {
  // @@protoc_insertion_point(field_release:protos.SubPreCommitedDisTx.contractAddress)
  
  return contractaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubPreCommitedDisTx::set_allocated_contractaddress(std::string* contractaddress) {
  if (contractaddress != nullptr) {
    
  } else {
    
  }
  contractaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contractaddress);
  // @@protoc_insertion_point(field_set_allocated:protos.SubPreCommitedDisTx.contractAddress)
}

// -------------------------------------------------------------------

// RLPWithReadSet

// bytes subTxRlp = 1;
inline void RLPWithReadSet::clear_subtxrlp() {
  subtxrlp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RLPWithReadSet::subtxrlp() const {
  // @@protoc_insertion_point(field_get:protos.RLPWithReadSet.subTxRlp)
  return _internal_subtxrlp();
}
inline void RLPWithReadSet::set_subtxrlp(const std::string& value) {
  _internal_set_subtxrlp(value);
  // @@protoc_insertion_point(field_set:protos.RLPWithReadSet.subTxRlp)
}
inline std::string* RLPWithReadSet::mutable_subtxrlp() {
  // @@protoc_insertion_point(field_mutable:protos.RLPWithReadSet.subTxRlp)
  return _internal_mutable_subtxrlp();
}
inline const std::string& RLPWithReadSet::_internal_subtxrlp() const {
  return subtxrlp_.GetNoArena();
}
inline void RLPWithReadSet::_internal_set_subtxrlp(const std::string& value) {
  
  subtxrlp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RLPWithReadSet::set_subtxrlp(std::string&& value) {
  
  subtxrlp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.RLPWithReadSet.subTxRlp)
}
inline void RLPWithReadSet::set_subtxrlp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subtxrlp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.RLPWithReadSet.subTxRlp)
}
inline void RLPWithReadSet::set_subtxrlp(const void* value, size_t size) {
  
  subtxrlp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.RLPWithReadSet.subTxRlp)
}
inline std::string* RLPWithReadSet::_internal_mutable_subtxrlp() {
  
  return subtxrlp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RLPWithReadSet::release_subtxrlp() {
  // @@protoc_insertion_point(field_release:protos.RLPWithReadSet.subTxRlp)
  
  return subtxrlp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RLPWithReadSet::set_allocated_subtxrlp(std::string* subtxrlp) {
  if (subtxrlp != nullptr) {
    
  } else {
    
  }
  subtxrlp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subtxrlp);
  // @@protoc_insertion_point(field_set_allocated:protos.RLPWithReadSet.subTxRlp)
}

// bytes readset = 2;
inline void RLPWithReadSet::clear_readset() {
  readset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RLPWithReadSet::readset() const {
  // @@protoc_insertion_point(field_get:protos.RLPWithReadSet.readset)
  return _internal_readset();
}
inline void RLPWithReadSet::set_readset(const std::string& value) {
  _internal_set_readset(value);
  // @@protoc_insertion_point(field_set:protos.RLPWithReadSet.readset)
}
inline std::string* RLPWithReadSet::mutable_readset() {
  // @@protoc_insertion_point(field_mutable:protos.RLPWithReadSet.readset)
  return _internal_mutable_readset();
}
inline const std::string& RLPWithReadSet::_internal_readset() const {
  return readset_.GetNoArena();
}
inline void RLPWithReadSet::_internal_set_readset(const std::string& value) {
  
  readset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RLPWithReadSet::set_readset(std::string&& value) {
  
  readset_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.RLPWithReadSet.readset)
}
inline void RLPWithReadSet::set_readset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  readset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.RLPWithReadSet.readset)
}
inline void RLPWithReadSet::set_readset(const void* value, size_t size) {
  
  readset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.RLPWithReadSet.readset)
}
inline std::string* RLPWithReadSet::_internal_mutable_readset() {
  
  return readset_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RLPWithReadSet::release_readset() {
  // @@protoc_insertion_point(field_release:protos.RLPWithReadSet.readset)
  
  return readset_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RLPWithReadSet::set_allocated_readset(std::string* readset) {
  if (readset != nullptr) {
    
  } else {
    
  }
  readset_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), readset);
  // @@protoc_insertion_point(field_set_allocated:protos.RLPWithReadSet.readset)
}

// bytes contractAddress = 3;
inline void RLPWithReadSet::clear_contractaddress() {
  contractaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RLPWithReadSet::contractaddress() const {
  // @@protoc_insertion_point(field_get:protos.RLPWithReadSet.contractAddress)
  return _internal_contractaddress();
}
inline void RLPWithReadSet::set_contractaddress(const std::string& value) {
  _internal_set_contractaddress(value);
  // @@protoc_insertion_point(field_set:protos.RLPWithReadSet.contractAddress)
}
inline std::string* RLPWithReadSet::mutable_contractaddress() {
  // @@protoc_insertion_point(field_mutable:protos.RLPWithReadSet.contractAddress)
  return _internal_mutable_contractaddress();
}
inline const std::string& RLPWithReadSet::_internal_contractaddress() const {
  return contractaddress_.GetNoArena();
}
inline void RLPWithReadSet::_internal_set_contractaddress(const std::string& value) {
  
  contractaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RLPWithReadSet::set_contractaddress(std::string&& value) {
  
  contractaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.RLPWithReadSet.contractAddress)
}
inline void RLPWithReadSet::set_contractaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.RLPWithReadSet.contractAddress)
}
inline void RLPWithReadSet::set_contractaddress(const void* value, size_t size) {
  
  contractaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.RLPWithReadSet.contractAddress)
}
inline std::string* RLPWithReadSet::_internal_mutable_contractaddress() {
  
  return contractaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RLPWithReadSet::release_contractaddress() {
  // @@protoc_insertion_point(field_release:protos.RLPWithReadSet.contractAddress)
  
  return contractaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RLPWithReadSet::set_allocated_contractaddress(std::string* contractaddress) {
  if (contractaddress != nullptr) {
    
  } else {
    
  }
  contractaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contractaddress);
  // @@protoc_insertion_point(field_set_allocated:protos.RLPWithReadSet.contractAddress)
}

// -------------------------------------------------------------------

// CommittedRLPWithReadSet

// bytes subTxRlp = 1;
inline void CommittedRLPWithReadSet::clear_subtxrlp() {
  subtxrlp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommittedRLPWithReadSet::subtxrlp() const {
  // @@protoc_insertion_point(field_get:protos.CommittedRLPWithReadSet.subTxRlp)
  return _internal_subtxrlp();
}
inline void CommittedRLPWithReadSet::set_subtxrlp(const std::string& value) {
  _internal_set_subtxrlp(value);
  // @@protoc_insertion_point(field_set:protos.CommittedRLPWithReadSet.subTxRlp)
}
inline std::string* CommittedRLPWithReadSet::mutable_subtxrlp() {
  // @@protoc_insertion_point(field_mutable:protos.CommittedRLPWithReadSet.subTxRlp)
  return _internal_mutable_subtxrlp();
}
inline const std::string& CommittedRLPWithReadSet::_internal_subtxrlp() const {
  return subtxrlp_.GetNoArena();
}
inline void CommittedRLPWithReadSet::_internal_set_subtxrlp(const std::string& value) {
  
  subtxrlp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommittedRLPWithReadSet::set_subtxrlp(std::string&& value) {
  
  subtxrlp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.CommittedRLPWithReadSet.subTxRlp)
}
inline void CommittedRLPWithReadSet::set_subtxrlp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subtxrlp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.CommittedRLPWithReadSet.subTxRlp)
}
inline void CommittedRLPWithReadSet::set_subtxrlp(const void* value, size_t size) {
  
  subtxrlp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.CommittedRLPWithReadSet.subTxRlp)
}
inline std::string* CommittedRLPWithReadSet::_internal_mutable_subtxrlp() {
  
  return subtxrlp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommittedRLPWithReadSet::release_subtxrlp() {
  // @@protoc_insertion_point(field_release:protos.CommittedRLPWithReadSet.subTxRlp)
  
  return subtxrlp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommittedRLPWithReadSet::set_allocated_subtxrlp(std::string* subtxrlp) {
  if (subtxrlp != nullptr) {
    
  } else {
    
  }
  subtxrlp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subtxrlp);
  // @@protoc_insertion_point(field_set_allocated:protos.CommittedRLPWithReadSet.subTxRlp)
}

// bytes readset = 2;
inline void CommittedRLPWithReadSet::clear_readset() {
  readset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommittedRLPWithReadSet::readset() const {
  // @@protoc_insertion_point(field_get:protos.CommittedRLPWithReadSet.readset)
  return _internal_readset();
}
inline void CommittedRLPWithReadSet::set_readset(const std::string& value) {
  _internal_set_readset(value);
  // @@protoc_insertion_point(field_set:protos.CommittedRLPWithReadSet.readset)
}
inline std::string* CommittedRLPWithReadSet::mutable_readset() {
  // @@protoc_insertion_point(field_mutable:protos.CommittedRLPWithReadSet.readset)
  return _internal_mutable_readset();
}
inline const std::string& CommittedRLPWithReadSet::_internal_readset() const {
  return readset_.GetNoArena();
}
inline void CommittedRLPWithReadSet::_internal_set_readset(const std::string& value) {
  
  readset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommittedRLPWithReadSet::set_readset(std::string&& value) {
  
  readset_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.CommittedRLPWithReadSet.readset)
}
inline void CommittedRLPWithReadSet::set_readset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  readset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.CommittedRLPWithReadSet.readset)
}
inline void CommittedRLPWithReadSet::set_readset(const void* value, size_t size) {
  
  readset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.CommittedRLPWithReadSet.readset)
}
inline std::string* CommittedRLPWithReadSet::_internal_mutable_readset() {
  
  return readset_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommittedRLPWithReadSet::release_readset() {
  // @@protoc_insertion_point(field_release:protos.CommittedRLPWithReadSet.readset)
  
  return readset_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommittedRLPWithReadSet::set_allocated_readset(std::string* readset) {
  if (readset != nullptr) {
    
  } else {
    
  }
  readset_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), readset);
  // @@protoc_insertion_point(field_set_allocated:protos.CommittedRLPWithReadSet.readset)
}

// bytes contractAddress = 3;
inline void CommittedRLPWithReadSet::clear_contractaddress() {
  contractaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CommittedRLPWithReadSet::contractaddress() const {
  // @@protoc_insertion_point(field_get:protos.CommittedRLPWithReadSet.contractAddress)
  return _internal_contractaddress();
}
inline void CommittedRLPWithReadSet::set_contractaddress(const std::string& value) {
  _internal_set_contractaddress(value);
  // @@protoc_insertion_point(field_set:protos.CommittedRLPWithReadSet.contractAddress)
}
inline std::string* CommittedRLPWithReadSet::mutable_contractaddress() {
  // @@protoc_insertion_point(field_mutable:protos.CommittedRLPWithReadSet.contractAddress)
  return _internal_mutable_contractaddress();
}
inline const std::string& CommittedRLPWithReadSet::_internal_contractaddress() const {
  return contractaddress_.GetNoArena();
}
inline void CommittedRLPWithReadSet::_internal_set_contractaddress(const std::string& value) {
  
  contractaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommittedRLPWithReadSet::set_contractaddress(std::string&& value) {
  
  contractaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.CommittedRLPWithReadSet.contractAddress)
}
inline void CommittedRLPWithReadSet::set_contractaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.CommittedRLPWithReadSet.contractAddress)
}
inline void CommittedRLPWithReadSet::set_contractaddress(const void* value, size_t size) {
  
  contractaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.CommittedRLPWithReadSet.contractAddress)
}
inline std::string* CommittedRLPWithReadSet::_internal_mutable_contractaddress() {
  
  return contractaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommittedRLPWithReadSet::release_contractaddress() {
  // @@protoc_insertion_point(field_release:protos.CommittedRLPWithReadSet.contractAddress)
  
  return contractaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommittedRLPWithReadSet::set_allocated_contractaddress(std::string* contractaddress) {
  if (contractaddress != nullptr) {
    
  } else {
    
  }
  contractaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contractaddress);
  // @@protoc_insertion_point(field_set_allocated:protos.CommittedRLPWithReadSet.contractAddress)
}

// -------------------------------------------------------------------

// KV

// bytes key = 1;
inline void KV::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KV::key() const {
  // @@protoc_insertion_point(field_get:protos.KV.key)
  return _internal_key();
}
inline void KV::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:protos.KV.key)
}
inline std::string* KV::mutable_key() {
  // @@protoc_insertion_point(field_mutable:protos.KV.key)
  return _internal_mutable_key();
}
inline const std::string& KV::_internal_key() const {
  return key_.GetNoArena();
}
inline void KV::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KV::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.KV.key)
}
inline void KV::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.KV.key)
}
inline void KV::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.KV.key)
}
inline std::string* KV::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KV::release_key() {
  // @@protoc_insertion_point(field_release:protos.KV.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KV::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:protos.KV.key)
}

// bytes value = 2;
inline void KV::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KV::value() const {
  // @@protoc_insertion_point(field_get:protos.KV.value)
  return _internal_value();
}
inline void KV::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:protos.KV.value)
}
inline std::string* KV::mutable_value() {
  // @@protoc_insertion_point(field_mutable:protos.KV.value)
  return _internal_mutable_value();
}
inline const std::string& KV::_internal_value() const {
  return value_.GetNoArena();
}
inline void KV::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KV::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.KV.value)
}
inline void KV::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.KV.value)
}
inline void KV::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.KV.value)
}
inline std::string* KV::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KV::release_value() {
  // @@protoc_insertion_point(field_release:protos.KV.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KV::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:protos.KV.value)
}

// -------------------------------------------------------------------

// Block

// .protos.BlockHeader blockHeader = 1;
inline bool Block::_internal_has_blockheader() const {
  return this != internal_default_instance() && blockheader_ != nullptr;
}
inline bool Block::has_blockheader() const {
  return _internal_has_blockheader();
}
inline void Block::clear_blockheader() {
  if (GetArenaNoVirtual() == nullptr && blockheader_ != nullptr) {
    delete blockheader_;
  }
  blockheader_ = nullptr;
}
inline const ::protos::BlockHeader& Block::_internal_blockheader() const {
  const ::protos::BlockHeader* p = blockheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::BlockHeader*>(
      &::protos::_BlockHeader_default_instance_);
}
inline const ::protos::BlockHeader& Block::blockheader() const {
  // @@protoc_insertion_point(field_get:protos.Block.blockHeader)
  return _internal_blockheader();
}
inline ::protos::BlockHeader* Block::release_blockheader() {
  // @@protoc_insertion_point(field_release:protos.Block.blockHeader)
  
  ::protos::BlockHeader* temp = blockheader_;
  blockheader_ = nullptr;
  return temp;
}
inline ::protos::BlockHeader* Block::_internal_mutable_blockheader() {
  
  if (blockheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::BlockHeader>(GetArenaNoVirtual());
    blockheader_ = p;
  }
  return blockheader_;
}
inline ::protos::BlockHeader* Block::mutable_blockheader() {
  // @@protoc_insertion_point(field_mutable:protos.Block.blockHeader)
  return _internal_mutable_blockheader();
}
inline void Block::set_allocated_blockheader(::protos::BlockHeader* blockheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blockheader_;
  }
  if (blockheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blockheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blockheader, submessage_arena);
    }
    
  } else {
    
  }
  blockheader_ = blockheader;
  // @@protoc_insertion_point(field_set_allocated:protos.Block.blockHeader)
}

// repeated .protos.Transaction transactions = 2;
inline int Block::_internal_transactions_size() const {
  return transactions_.size();
}
inline int Block::transactions_size() const {
  return _internal_transactions_size();
}
inline void Block::clear_transactions() {
  transactions_.Clear();
}
inline ::protos::Transaction* Block::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:protos.Block.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::Transaction >*
Block::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:protos.Block.transactions)
  return &transactions_;
}
inline const ::protos::Transaction& Block::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::protos::Transaction& Block::transactions(int index) const {
  // @@protoc_insertion_point(field_get:protos.Block.transactions)
  return _internal_transactions(index);
}
inline ::protos::Transaction* Block::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::protos::Transaction* Block::add_transactions() {
  // @@protoc_insertion_point(field_add:protos.Block.transactions)
  return _internal_add_transactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::Transaction >&
Block::transactions() const {
  // @@protoc_insertion_point(field_list:protos.Block.transactions)
  return transactions_;
}

// -------------------------------------------------------------------

// DAGWithReadSet

// uint64 blockNum = 1;
inline void DAGWithReadSet::clear_blocknum() {
  blocknum_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAGWithReadSet::_internal_blocknum() const {
  return blocknum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAGWithReadSet::blocknum() const {
  // @@protoc_insertion_point(field_get:protos.DAGWithReadSet.blockNum)
  return _internal_blocknum();
}
inline void DAGWithReadSet::_internal_set_blocknum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  blocknum_ = value;
}
inline void DAGWithReadSet::set_blocknum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blocknum(value);
  // @@protoc_insertion_point(field_set:protos.DAGWithReadSet.blockNum)
}

// uint64 dagId = 2;
inline void DAGWithReadSet::clear_dagid() {
  dagid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAGWithReadSet::_internal_dagid() const {
  return dagid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAGWithReadSet::dagid() const {
  // @@protoc_insertion_point(field_get:protos.DAGWithReadSet.dagId)
  return _internal_dagid();
}
inline void DAGWithReadSet::_internal_set_dagid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dagid_ = value;
}
inline void DAGWithReadSet::set_dagid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dagid(value);
  // @@protoc_insertion_point(field_set:protos.DAGWithReadSet.dagId)
}

// uint64 shardId = 3;
inline void DAGWithReadSet::clear_shardid() {
  shardid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAGWithReadSet::_internal_shardid() const {
  return shardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAGWithReadSet::shardid() const {
  // @@protoc_insertion_point(field_get:protos.DAGWithReadSet.shardId)
  return _internal_shardid();
}
inline void DAGWithReadSet::_internal_set_shardid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shardid_ = value;
}
inline void DAGWithReadSet::set_shardid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shardid(value);
  // @@protoc_insertion_point(field_set:protos.DAGWithReadSet.shardId)
}

// repeated bytes transactions = 4;
inline int DAGWithReadSet::_internal_transactions_size() const {
  return transactions_.size();
}
inline int DAGWithReadSet::transactions_size() const {
  return _internal_transactions_size();
}
inline void DAGWithReadSet::clear_transactions() {
  transactions_.Clear();
}
inline std::string* DAGWithReadSet::add_transactions() {
  // @@protoc_insertion_point(field_add_mutable:protos.DAGWithReadSet.transactions)
  return _internal_add_transactions();
}
inline const std::string& DAGWithReadSet::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const std::string& DAGWithReadSet::transactions(int index) const {
  // @@protoc_insertion_point(field_get:protos.DAGWithReadSet.transactions)
  return _internal_transactions(index);
}
inline std::string* DAGWithReadSet::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:protos.DAGWithReadSet.transactions)
  return transactions_.Mutable(index);
}
inline void DAGWithReadSet::set_transactions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protos.DAGWithReadSet.transactions)
  transactions_.Mutable(index)->assign(value);
}
inline void DAGWithReadSet::set_transactions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protos.DAGWithReadSet.transactions)
  transactions_.Mutable(index)->assign(std::move(value));
}
inline void DAGWithReadSet::set_transactions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transactions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protos.DAGWithReadSet.transactions)
}
inline void DAGWithReadSet::set_transactions(int index, const void* value, size_t size) {
  transactions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protos.DAGWithReadSet.transactions)
}
inline std::string* DAGWithReadSet::_internal_add_transactions() {
  return transactions_.Add();
}
inline void DAGWithReadSet::add_transactions(const std::string& value) {
  transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protos.DAGWithReadSet.transactions)
}
inline void DAGWithReadSet::add_transactions(std::string&& value) {
  transactions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protos.DAGWithReadSet.transactions)
}
inline void DAGWithReadSet::add_transactions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protos.DAGWithReadSet.transactions)
}
inline void DAGWithReadSet::add_transactions(const void* value, size_t size) {
  transactions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protos.DAGWithReadSet.transactions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DAGWithReadSet::transactions() const {
  // @@protoc_insertion_point(field_list:protos.DAGWithReadSet.transactions)
  return transactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DAGWithReadSet::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:protos.DAGWithReadSet.transactions)
  return &transactions_;
}

// repeated .protos.KV readSet = 5;
inline int DAGWithReadSet::_internal_readset_size() const {
  return readset_.size();
}
inline int DAGWithReadSet::readset_size() const {
  return _internal_readset_size();
}
inline void DAGWithReadSet::clear_readset() {
  readset_.Clear();
}
inline ::protos::KV* DAGWithReadSet::mutable_readset(int index) {
  // @@protoc_insertion_point(field_mutable:protos.DAGWithReadSet.readSet)
  return readset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::KV >*
DAGWithReadSet::mutable_readset() {
  // @@protoc_insertion_point(field_mutable_list:protos.DAGWithReadSet.readSet)
  return &readset_;
}
inline const ::protos::KV& DAGWithReadSet::_internal_readset(int index) const {
  return readset_.Get(index);
}
inline const ::protos::KV& DAGWithReadSet::readset(int index) const {
  // @@protoc_insertion_point(field_get:protos.DAGWithReadSet.readSet)
  return _internal_readset(index);
}
inline ::protos::KV* DAGWithReadSet::_internal_add_readset() {
  return readset_.Add();
}
inline ::protos::KV* DAGWithReadSet::add_readset() {
  // @@protoc_insertion_point(field_add:protos.DAGWithReadSet.readSet)
  return _internal_add_readset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::KV >&
DAGWithReadSet::readset() const {
  // @@protoc_insertion_point(field_list:protos.DAGWithReadSet.readSet)
  return readset_;
}

// uint64 readSetNum = 6;
inline void DAGWithReadSet::clear_readsetnum() {
  readsetnum_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAGWithReadSet::_internal_readsetnum() const {
  return readsetnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAGWithReadSet::readsetnum() const {
  // @@protoc_insertion_point(field_get:protos.DAGWithReadSet.readSetNum)
  return _internal_readsetnum();
}
inline void DAGWithReadSet::_internal_set_readsetnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  readsetnum_ = value;
}
inline void DAGWithReadSet::set_readsetnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_readsetnum(value);
  // @@protoc_insertion_point(field_set:protos.DAGWithReadSet.readSetNum)
}

// -------------------------------------------------------------------

// Transaction

// uint64 txId = 1;
inline void Transaction::clear_txid() {
  txid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_txid() const {
  return txid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::txid() const {
  // @@protoc_insertion_point(field_get:protos.Transaction.txId)
  return _internal_txid();
}
inline void Transaction::_internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  txid_ = value;
}
inline void Transaction::set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:protos.Transaction.txId)
}

// bytes from = 2;
inline void Transaction::clear_from() {
  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::from() const {
  // @@protoc_insertion_point(field_get:protos.Transaction.from)
  return _internal_from();
}
inline void Transaction::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:protos.Transaction.from)
}
inline std::string* Transaction::mutable_from() {
  // @@protoc_insertion_point(field_mutable:protos.Transaction.from)
  return _internal_mutable_from();
}
inline const std::string& Transaction::_internal_from() const {
  return from_.GetNoArena();
}
inline void Transaction::_internal_set_from(const std::string& value) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_from(std::string&& value) {
  
  from_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.Transaction.from)
}
inline void Transaction::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Transaction.from)
}
inline void Transaction::set_from(const void* value, size_t size) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Transaction.from)
}
inline std::string* Transaction::_internal_mutable_from() {
  
  return from_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_from() {
  // @@protoc_insertion_point(field_release:protos.Transaction.from)
  
  return from_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:protos.Transaction.from)
}

// bytes to = 3;
inline void Transaction::clear_to() {
  to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::to() const {
  // @@protoc_insertion_point(field_get:protos.Transaction.to)
  return _internal_to();
}
inline void Transaction::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:protos.Transaction.to)
}
inline std::string* Transaction::mutable_to() {
  // @@protoc_insertion_point(field_mutable:protos.Transaction.to)
  return _internal_mutable_to();
}
inline const std::string& Transaction::_internal_to() const {
  return to_.GetNoArena();
}
inline void Transaction::_internal_set_to(const std::string& value) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_to(std::string&& value) {
  
  to_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.Transaction.to)
}
inline void Transaction::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Transaction.to)
}
inline void Transaction::set_to(const void* value, size_t size) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Transaction.to)
}
inline std::string* Transaction::_internal_mutable_to() {
  
  return to_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_to() {
  // @@protoc_insertion_point(field_release:protos.Transaction.to)
  
  return to_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:protos.Transaction.to)
}

// bytes value = 4;
inline void Transaction::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::value() const {
  // @@protoc_insertion_point(field_get:protos.Transaction.value)
  return _internal_value();
}
inline void Transaction::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:protos.Transaction.value)
}
inline std::string* Transaction::mutable_value() {
  // @@protoc_insertion_point(field_mutable:protos.Transaction.value)
  return _internal_mutable_value();
}
inline const std::string& Transaction::_internal_value() const {
  return value_.GetNoArena();
}
inline void Transaction::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.Transaction.value)
}
inline void Transaction::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Transaction.value)
}
inline void Transaction::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Transaction.value)
}
inline std::string* Transaction::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_value() {
  // @@protoc_insertion_point(field_release:protos.Transaction.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:protos.Transaction.value)
}

// bytes data = 5;
inline void Transaction::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::data() const {
  // @@protoc_insertion_point(field_get:protos.Transaction.data)
  return _internal_data();
}
inline void Transaction::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:protos.Transaction.data)
}
inline std::string* Transaction::mutable_data() {
  // @@protoc_insertion_point(field_mutable:protos.Transaction.data)
  return _internal_mutable_data();
}
inline const std::string& Transaction::_internal_data() const {
  return data_.GetNoArena();
}
inline void Transaction::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.Transaction.data)
}
inline void Transaction::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.Transaction.data)
}
inline void Transaction::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.Transaction.data)
}
inline std::string* Transaction::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_data() {
  // @@protoc_insertion_point(field_release:protos.Transaction.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:protos.Transaction.data)
}

// repeated uint64 readers = 6;
inline int Transaction::_internal_readers_size() const {
  return readers_.size();
}
inline int Transaction::readers_size() const {
  return _internal_readers_size();
}
inline void Transaction::clear_readers() {
  readers_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_readers(int index) const {
  return readers_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::readers(int index) const {
  // @@protoc_insertion_point(field_get:protos.Transaction.readers)
  return _internal_readers(index);
}
inline void Transaction::set_readers(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  readers_.Set(index, value);
  // @@protoc_insertion_point(field_set:protos.Transaction.readers)
}
inline void Transaction::_internal_add_readers(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  readers_.Add(value);
}
inline void Transaction::add_readers(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_readers(value);
  // @@protoc_insertion_point(field_add:protos.Transaction.readers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Transaction::_internal_readers() const {
  return readers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Transaction::readers() const {
  // @@protoc_insertion_point(field_list:protos.Transaction.readers)
  return _internal_readers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Transaction::_internal_mutable_readers() {
  return &readers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Transaction::mutable_readers() {
  // @@protoc_insertion_point(field_mutable_list:protos.Transaction.readers)
  return _internal_mutable_readers();
}

// repeated uint64 writers = 7;
inline int Transaction::_internal_writers_size() const {
  return writers_.size();
}
inline int Transaction::writers_size() const {
  return _internal_writers_size();
}
inline void Transaction::clear_writers() {
  writers_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_writers(int index) const {
  return writers_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::writers(int index) const {
  // @@protoc_insertion_point(field_get:protos.Transaction.writers)
  return _internal_writers(index);
}
inline void Transaction::set_writers(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  writers_.Set(index, value);
  // @@protoc_insertion_point(field_set:protos.Transaction.writers)
}
inline void Transaction::_internal_add_writers(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  writers_.Add(value);
}
inline void Transaction::add_writers(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_writers(value);
  // @@protoc_insertion_point(field_add:protos.Transaction.writers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Transaction::_internal_writers() const {
  return writers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Transaction::writers() const {
  // @@protoc_insertion_point(field_list:protos.Transaction.writers)
  return _internal_writers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Transaction::_internal_mutable_writers() {
  return &writers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Transaction::mutable_writers() {
  // @@protoc_insertion_point(field_mutable_list:protos.Transaction.writers)
  return _internal_mutable_writers();
}

// repeated bytes read_set = 8;
inline int Transaction::_internal_read_set_size() const {
  return read_set_.size();
}
inline int Transaction::read_set_size() const {
  return _internal_read_set_size();
}
inline void Transaction::clear_read_set() {
  read_set_.Clear();
}
inline std::string* Transaction::add_read_set() {
  // @@protoc_insertion_point(field_add_mutable:protos.Transaction.read_set)
  return _internal_add_read_set();
}
inline const std::string& Transaction::_internal_read_set(int index) const {
  return read_set_.Get(index);
}
inline const std::string& Transaction::read_set(int index) const {
  // @@protoc_insertion_point(field_get:protos.Transaction.read_set)
  return _internal_read_set(index);
}
inline std::string* Transaction::mutable_read_set(int index) {
  // @@protoc_insertion_point(field_mutable:protos.Transaction.read_set)
  return read_set_.Mutable(index);
}
inline void Transaction::set_read_set(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protos.Transaction.read_set)
  read_set_.Mutable(index)->assign(value);
}
inline void Transaction::set_read_set(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protos.Transaction.read_set)
  read_set_.Mutable(index)->assign(std::move(value));
}
inline void Transaction::set_read_set(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  read_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protos.Transaction.read_set)
}
inline void Transaction::set_read_set(int index, const void* value, size_t size) {
  read_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protos.Transaction.read_set)
}
inline std::string* Transaction::_internal_add_read_set() {
  return read_set_.Add();
}
inline void Transaction::add_read_set(const std::string& value) {
  read_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protos.Transaction.read_set)
}
inline void Transaction::add_read_set(std::string&& value) {
  read_set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protos.Transaction.read_set)
}
inline void Transaction::add_read_set(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  read_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protos.Transaction.read_set)
}
inline void Transaction::add_read_set(const void* value, size_t size) {
  read_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protos.Transaction.read_set)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Transaction::read_set() const {
  // @@protoc_insertion_point(field_list:protos.Transaction.read_set)
  return read_set_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Transaction::mutable_read_set() {
  // @@protoc_insertion_point(field_mutable_list:protos.Transaction.read_set)
  return &read_set_;
}

// repeated bytes read_write_set = 9;
inline int Transaction::_internal_read_write_set_size() const {
  return read_write_set_.size();
}
inline int Transaction::read_write_set_size() const {
  return _internal_read_write_set_size();
}
inline void Transaction::clear_read_write_set() {
  read_write_set_.Clear();
}
inline std::string* Transaction::add_read_write_set() {
  // @@protoc_insertion_point(field_add_mutable:protos.Transaction.read_write_set)
  return _internal_add_read_write_set();
}
inline const std::string& Transaction::_internal_read_write_set(int index) const {
  return read_write_set_.Get(index);
}
inline const std::string& Transaction::read_write_set(int index) const {
  // @@protoc_insertion_point(field_get:protos.Transaction.read_write_set)
  return _internal_read_write_set(index);
}
inline std::string* Transaction::mutable_read_write_set(int index) {
  // @@protoc_insertion_point(field_mutable:protos.Transaction.read_write_set)
  return read_write_set_.Mutable(index);
}
inline void Transaction::set_read_write_set(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protos.Transaction.read_write_set)
  read_write_set_.Mutable(index)->assign(value);
}
inline void Transaction::set_read_write_set(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protos.Transaction.read_write_set)
  read_write_set_.Mutable(index)->assign(std::move(value));
}
inline void Transaction::set_read_write_set(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  read_write_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protos.Transaction.read_write_set)
}
inline void Transaction::set_read_write_set(int index, const void* value, size_t size) {
  read_write_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protos.Transaction.read_write_set)
}
inline std::string* Transaction::_internal_add_read_write_set() {
  return read_write_set_.Add();
}
inline void Transaction::add_read_write_set(const std::string& value) {
  read_write_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protos.Transaction.read_write_set)
}
inline void Transaction::add_read_write_set(std::string&& value) {
  read_write_set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protos.Transaction.read_write_set)
}
inline void Transaction::add_read_write_set(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  read_write_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protos.Transaction.read_write_set)
}
inline void Transaction::add_read_write_set(const void* value, size_t size) {
  read_write_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protos.Transaction.read_write_set)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Transaction::read_write_set() const {
  // @@protoc_insertion_point(field_list:protos.Transaction.read_write_set)
  return read_write_set_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Transaction::mutable_read_write_set() {
  // @@protoc_insertion_point(field_mutable_list:protos.Transaction.read_write_set)
  return &read_write_set_;
}

// uint64 shardId = 10;
inline void Transaction::clear_shardid() {
  shardid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_shardid() const {
  return shardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::shardid() const {
  // @@protoc_insertion_point(field_get:protos.Transaction.shardId)
  return _internal_shardid();
}
inline void Transaction::_internal_set_shardid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shardid_ = value;
}
inline void Transaction::set_shardid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shardid(value);
  // @@protoc_insertion_point(field_set:protos.Transaction.shardId)
}

// uint64 DAGId = 11;
inline void Transaction::clear_dagid() {
  dagid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_dagid() const {
  return dagid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::dagid() const {
  // @@protoc_insertion_point(field_get:protos.Transaction.DAGId)
  return _internal_dagid();
}
inline void Transaction::_internal_set_dagid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dagid_ = value;
}
inline void Transaction::set_dagid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dagid(value);
  // @@protoc_insertion_point(field_set:protos.Transaction.DAGId)
}

// repeated bytes lastStateInDAG = 12;
inline int Transaction::_internal_laststateindag_size() const {
  return laststateindag_.size();
}
inline int Transaction::laststateindag_size() const {
  return _internal_laststateindag_size();
}
inline void Transaction::clear_laststateindag() {
  laststateindag_.Clear();
}
inline std::string* Transaction::add_laststateindag() {
  // @@protoc_insertion_point(field_add_mutable:protos.Transaction.lastStateInDAG)
  return _internal_add_laststateindag();
}
inline const std::string& Transaction::_internal_laststateindag(int index) const {
  return laststateindag_.Get(index);
}
inline const std::string& Transaction::laststateindag(int index) const {
  // @@protoc_insertion_point(field_get:protos.Transaction.lastStateInDAG)
  return _internal_laststateindag(index);
}
inline std::string* Transaction::mutable_laststateindag(int index) {
  // @@protoc_insertion_point(field_mutable:protos.Transaction.lastStateInDAG)
  return laststateindag_.Mutable(index);
}
inline void Transaction::set_laststateindag(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protos.Transaction.lastStateInDAG)
  laststateindag_.Mutable(index)->assign(value);
}
inline void Transaction::set_laststateindag(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protos.Transaction.lastStateInDAG)
  laststateindag_.Mutable(index)->assign(std::move(value));
}
inline void Transaction::set_laststateindag(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  laststateindag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protos.Transaction.lastStateInDAG)
}
inline void Transaction::set_laststateindag(int index, const void* value, size_t size) {
  laststateindag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protos.Transaction.lastStateInDAG)
}
inline std::string* Transaction::_internal_add_laststateindag() {
  return laststateindag_.Add();
}
inline void Transaction::add_laststateindag(const std::string& value) {
  laststateindag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protos.Transaction.lastStateInDAG)
}
inline void Transaction::add_laststateindag(std::string&& value) {
  laststateindag_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protos.Transaction.lastStateInDAG)
}
inline void Transaction::add_laststateindag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  laststateindag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protos.Transaction.lastStateInDAG)
}
inline void Transaction::add_laststateindag(const void* value, size_t size) {
  laststateindag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protos.Transaction.lastStateInDAG)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Transaction::laststateindag() const {
  // @@protoc_insertion_point(field_list:protos.Transaction.lastStateInDAG)
  return laststateindag_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Transaction::mutable_laststateindag() {
  // @@protoc_insertion_point(field_mutable_list:protos.Transaction.lastStateInDAG)
  return &laststateindag_;
}

// -------------------------------------------------------------------

// TxWithReadSet

// uint64 txId = 1;
inline void TxWithReadSet::clear_txid() {
  txid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxWithReadSet::_internal_txid() const {
  return txid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxWithReadSet::txid() const {
  // @@protoc_insertion_point(field_get:protos.TxWithReadSet.txId)
  return _internal_txid();
}
inline void TxWithReadSet::_internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  txid_ = value;
}
inline void TxWithReadSet::set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:protos.TxWithReadSet.txId)
}

// uint64 dagId = 2;
inline void TxWithReadSet::clear_dagid() {
  dagid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxWithReadSet::_internal_dagid() const {
  return dagid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxWithReadSet::dagid() const {
  // @@protoc_insertion_point(field_get:protos.TxWithReadSet.dagId)
  return _internal_dagid();
}
inline void TxWithReadSet::_internal_set_dagid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dagid_ = value;
}
inline void TxWithReadSet::set_dagid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dagid(value);
  // @@protoc_insertion_point(field_set:protos.TxWithReadSet.dagId)
}

// repeated .protos.KV readSet = 3;
inline int TxWithReadSet::_internal_readset_size() const {
  return readset_.size();
}
inline int TxWithReadSet::readset_size() const {
  return _internal_readset_size();
}
inline void TxWithReadSet::clear_readset() {
  readset_.Clear();
}
inline ::protos::KV* TxWithReadSet::mutable_readset(int index) {
  // @@protoc_insertion_point(field_mutable:protos.TxWithReadSet.readSet)
  return readset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::KV >*
TxWithReadSet::mutable_readset() {
  // @@protoc_insertion_point(field_mutable_list:protos.TxWithReadSet.readSet)
  return &readset_;
}
inline const ::protos::KV& TxWithReadSet::_internal_readset(int index) const {
  return readset_.Get(index);
}
inline const ::protos::KV& TxWithReadSet::readset(int index) const {
  // @@protoc_insertion_point(field_get:protos.TxWithReadSet.readSet)
  return _internal_readset(index);
}
inline ::protos::KV* TxWithReadSet::_internal_add_readset() {
  return readset_.Add();
}
inline ::protos::KV* TxWithReadSet::add_readset() {
  // @@protoc_insertion_point(field_add:protos.TxWithReadSet.readSet)
  return _internal_add_readset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::KV >&
TxWithReadSet::readset() const {
  // @@protoc_insertion_point(field_list:protos.TxWithReadSet.readSet)
  return readset_;
}

// -------------------------------------------------------------------

// CheckPoint

// uint64 checkpoint_id = 1;
inline void CheckPoint::clear_checkpoint_id() {
  checkpoint_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckPoint::_internal_checkpoint_id() const {
  return checkpoint_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckPoint::checkpoint_id() const {
  // @@protoc_insertion_point(field_get:protos.CheckPoint.checkpoint_id)
  return _internal_checkpoint_id();
}
inline void CheckPoint::_internal_set_checkpoint_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  checkpoint_id_ = value;
}
inline void CheckPoint::set_checkpoint_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_checkpoint_id(value);
  // @@protoc_insertion_point(field_set:protos.CheckPoint.checkpoint_id)
}

// bytes stateRoot = 2;
inline void CheckPoint::clear_stateroot() {
  stateroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CheckPoint::stateroot() const {
  // @@protoc_insertion_point(field_get:protos.CheckPoint.stateRoot)
  return _internal_stateroot();
}
inline void CheckPoint::set_stateroot(const std::string& value) {
  _internal_set_stateroot(value);
  // @@protoc_insertion_point(field_set:protos.CheckPoint.stateRoot)
}
inline std::string* CheckPoint::mutable_stateroot() {
  // @@protoc_insertion_point(field_mutable:protos.CheckPoint.stateRoot)
  return _internal_mutable_stateroot();
}
inline const std::string& CheckPoint::_internal_stateroot() const {
  return stateroot_.GetNoArena();
}
inline void CheckPoint::_internal_set_stateroot(const std::string& value) {
  
  stateroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CheckPoint::set_stateroot(std::string&& value) {
  
  stateroot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.CheckPoint.stateRoot)
}
inline void CheckPoint::set_stateroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stateroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.CheckPoint.stateRoot)
}
inline void CheckPoint::set_stateroot(const void* value, size_t size) {
  
  stateroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.CheckPoint.stateRoot)
}
inline std::string* CheckPoint::_internal_mutable_stateroot() {
  
  return stateroot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CheckPoint::release_stateroot() {
  // @@protoc_insertion_point(field_release:protos.CheckPoint.stateRoot)
  
  return stateroot_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CheckPoint::set_allocated_stateroot(std::string* stateroot) {
  if (stateroot != nullptr) {
    
  } else {
    
  }
  stateroot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stateroot);
  // @@protoc_insertion_point(field_set_allocated:protos.CheckPoint.stateRoot)
}

// bytes transactionsRoot = 3;
inline void CheckPoint::clear_transactionsroot() {
  transactionsroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CheckPoint::transactionsroot() const {
  // @@protoc_insertion_point(field_get:protos.CheckPoint.transactionsRoot)
  return _internal_transactionsroot();
}
inline void CheckPoint::set_transactionsroot(const std::string& value) {
  _internal_set_transactionsroot(value);
  // @@protoc_insertion_point(field_set:protos.CheckPoint.transactionsRoot)
}
inline std::string* CheckPoint::mutable_transactionsroot() {
  // @@protoc_insertion_point(field_mutable:protos.CheckPoint.transactionsRoot)
  return _internal_mutable_transactionsroot();
}
inline const std::string& CheckPoint::_internal_transactionsroot() const {
  return transactionsroot_.GetNoArena();
}
inline void CheckPoint::_internal_set_transactionsroot(const std::string& value) {
  
  transactionsroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CheckPoint::set_transactionsroot(std::string&& value) {
  
  transactionsroot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.CheckPoint.transactionsRoot)
}
inline void CheckPoint::set_transactionsroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transactionsroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.CheckPoint.transactionsRoot)
}
inline void CheckPoint::set_transactionsroot(const void* value, size_t size) {
  
  transactionsroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.CheckPoint.transactionsRoot)
}
inline std::string* CheckPoint::_internal_mutable_transactionsroot() {
  
  return transactionsroot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CheckPoint::release_transactionsroot() {
  // @@protoc_insertion_point(field_release:protos.CheckPoint.transactionsRoot)
  
  return transactionsroot_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CheckPoint::set_allocated_transactionsroot(std::string* transactionsroot) {
  if (transactionsroot != nullptr) {
    
  } else {
    
  }
  transactionsroot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transactionsroot);
  // @@protoc_insertion_point(field_set_allocated:protos.CheckPoint.transactionsRoot)
}

// -------------------------------------------------------------------

// ReadSet

// uint64 tx_idx = 1;
inline void ReadSet::clear_tx_idx() {
  tx_idx_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadSet::_internal_tx_idx() const {
  return tx_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadSet::tx_idx() const {
  // @@protoc_insertion_point(field_get:protos.ReadSet.tx_idx)
  return _internal_tx_idx();
}
inline void ReadSet::_internal_set_tx_idx(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_idx_ = value;
}
inline void ReadSet::set_tx_idx(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_idx(value);
  // @@protoc_insertion_point(field_set:protos.ReadSet.tx_idx)
}

// repeated .protos.KV read_set = 2;
inline int ReadSet::_internal_read_set_size() const {
  return read_set_.size();
}
inline int ReadSet::read_set_size() const {
  return _internal_read_set_size();
}
inline void ReadSet::clear_read_set() {
  read_set_.Clear();
}
inline ::protos::KV* ReadSet::mutable_read_set(int index) {
  // @@protoc_insertion_point(field_mutable:protos.ReadSet.read_set)
  return read_set_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::KV >*
ReadSet::mutable_read_set() {
  // @@protoc_insertion_point(field_mutable_list:protos.ReadSet.read_set)
  return &read_set_;
}
inline const ::protos::KV& ReadSet::_internal_read_set(int index) const {
  return read_set_.Get(index);
}
inline const ::protos::KV& ReadSet::read_set(int index) const {
  // @@protoc_insertion_point(field_get:protos.ReadSet.read_set)
  return _internal_read_set(index);
}
inline ::protos::KV* ReadSet::_internal_add_read_set() {
  return read_set_.Add();
}
inline ::protos::KV* ReadSet::add_read_set() {
  // @@protoc_insertion_point(field_add:protos.ReadSet.read_set)
  return _internal_add_read_set();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::KV >&
ReadSet::read_set() const {
  // @@protoc_insertion_point(field_list:protos.ReadSet.read_set)
  return read_set_;
}

// -------------------------------------------------------------------

// CommitState

// uint64 blockid = 1;
inline void CommitState::clear_blockid() {
  blockid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommitState::_internal_blockid() const {
  return blockid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommitState::blockid() const {
  // @@protoc_insertion_point(field_get:protos.CommitState.blockid)
  return _internal_blockid();
}
inline void CommitState::_internal_set_blockid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  blockid_ = value;
}
inline void CommitState::set_blockid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blockid(value);
  // @@protoc_insertion_point(field_set:protos.CommitState.blockid)
}

// -------------------------------------------------------------------

// BlockHeader

// bytes parentHash = 1;
inline void BlockHeader::clear_parenthash() {
  parenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader::parenthash() const {
  // @@protoc_insertion_point(field_get:protos.BlockHeader.parentHash)
  return _internal_parenthash();
}
inline void BlockHeader::set_parenthash(const std::string& value) {
  _internal_set_parenthash(value);
  // @@protoc_insertion_point(field_set:protos.BlockHeader.parentHash)
}
inline std::string* BlockHeader::mutable_parenthash() {
  // @@protoc_insertion_point(field_mutable:protos.BlockHeader.parentHash)
  return _internal_mutable_parenthash();
}
inline const std::string& BlockHeader::_internal_parenthash() const {
  return parenthash_.GetNoArena();
}
inline void BlockHeader::_internal_set_parenthash(const std::string& value) {
  
  parenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockHeader::set_parenthash(std::string&& value) {
  
  parenthash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.BlockHeader.parentHash)
}
inline void BlockHeader::set_parenthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.BlockHeader.parentHash)
}
inline void BlockHeader::set_parenthash(const void* value, size_t size) {
  
  parenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.BlockHeader.parentHash)
}
inline std::string* BlockHeader::_internal_mutable_parenthash() {
  
  return parenthash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader::release_parenthash() {
  // @@protoc_insertion_point(field_release:protos.BlockHeader.parentHash)
  
  return parenthash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_parenthash(std::string* parenthash) {
  if (parenthash != nullptr) {
    
  } else {
    
  }
  parenthash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parenthash);
  // @@protoc_insertion_point(field_set_allocated:protos.BlockHeader.parentHash)
}

// bytes stateRoot = 2;
inline void BlockHeader::clear_stateroot() {
  stateroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader::stateroot() const {
  // @@protoc_insertion_point(field_get:protos.BlockHeader.stateRoot)
  return _internal_stateroot();
}
inline void BlockHeader::set_stateroot(const std::string& value) {
  _internal_set_stateroot(value);
  // @@protoc_insertion_point(field_set:protos.BlockHeader.stateRoot)
}
inline std::string* BlockHeader::mutable_stateroot() {
  // @@protoc_insertion_point(field_mutable:protos.BlockHeader.stateRoot)
  return _internal_mutable_stateroot();
}
inline const std::string& BlockHeader::_internal_stateroot() const {
  return stateroot_.GetNoArena();
}
inline void BlockHeader::_internal_set_stateroot(const std::string& value) {
  
  stateroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockHeader::set_stateroot(std::string&& value) {
  
  stateroot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.BlockHeader.stateRoot)
}
inline void BlockHeader::set_stateroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stateroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.BlockHeader.stateRoot)
}
inline void BlockHeader::set_stateroot(const void* value, size_t size) {
  
  stateroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.BlockHeader.stateRoot)
}
inline std::string* BlockHeader::_internal_mutable_stateroot() {
  
  return stateroot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader::release_stateroot() {
  // @@protoc_insertion_point(field_release:protos.BlockHeader.stateRoot)
  
  return stateroot_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_stateroot(std::string* stateroot) {
  if (stateroot != nullptr) {
    
  } else {
    
  }
  stateroot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stateroot);
  // @@protoc_insertion_point(field_set_allocated:protos.BlockHeader.stateRoot)
}

// bytes transactionsRoot = 3;
inline void BlockHeader::clear_transactionsroot() {
  transactionsroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader::transactionsroot() const {
  // @@protoc_insertion_point(field_get:protos.BlockHeader.transactionsRoot)
  return _internal_transactionsroot();
}
inline void BlockHeader::set_transactionsroot(const std::string& value) {
  _internal_set_transactionsroot(value);
  // @@protoc_insertion_point(field_set:protos.BlockHeader.transactionsRoot)
}
inline std::string* BlockHeader::mutable_transactionsroot() {
  // @@protoc_insertion_point(field_mutable:protos.BlockHeader.transactionsRoot)
  return _internal_mutable_transactionsroot();
}
inline const std::string& BlockHeader::_internal_transactionsroot() const {
  return transactionsroot_.GetNoArena();
}
inline void BlockHeader::_internal_set_transactionsroot(const std::string& value) {
  
  transactionsroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockHeader::set_transactionsroot(std::string&& value) {
  
  transactionsroot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.BlockHeader.transactionsRoot)
}
inline void BlockHeader::set_transactionsroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transactionsroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.BlockHeader.transactionsRoot)
}
inline void BlockHeader::set_transactionsroot(const void* value, size_t size) {
  
  transactionsroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.BlockHeader.transactionsRoot)
}
inline std::string* BlockHeader::_internal_mutable_transactionsroot() {
  
  return transactionsroot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader::release_transactionsroot() {
  // @@protoc_insertion_point(field_release:protos.BlockHeader.transactionsRoot)
  
  return transactionsroot_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_transactionsroot(std::string* transactionsroot) {
  if (transactionsroot != nullptr) {
    
  } else {
    
  }
  transactionsroot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transactionsroot);
  // @@protoc_insertion_point(field_set_allocated:protos.BlockHeader.transactionsRoot)
}

// uint64 number = 4;
inline void BlockHeader::clear_number() {
  number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::number() const {
  // @@protoc_insertion_point(field_get:protos.BlockHeader.number)
  return _internal_number();
}
inline void BlockHeader::_internal_set_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  number_ = value;
}
inline void BlockHeader::set_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:protos.BlockHeader.number)
}

// bytes gasLimit = 5;
inline void BlockHeader::clear_gaslimit() {
  gaslimit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader::gaslimit() const {
  // @@protoc_insertion_point(field_get:protos.BlockHeader.gasLimit)
  return _internal_gaslimit();
}
inline void BlockHeader::set_gaslimit(const std::string& value) {
  _internal_set_gaslimit(value);
  // @@protoc_insertion_point(field_set:protos.BlockHeader.gasLimit)
}
inline std::string* BlockHeader::mutable_gaslimit() {
  // @@protoc_insertion_point(field_mutable:protos.BlockHeader.gasLimit)
  return _internal_mutable_gaslimit();
}
inline const std::string& BlockHeader::_internal_gaslimit() const {
  return gaslimit_.GetNoArena();
}
inline void BlockHeader::_internal_set_gaslimit(const std::string& value) {
  
  gaslimit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockHeader::set_gaslimit(std::string&& value) {
  
  gaslimit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.BlockHeader.gasLimit)
}
inline void BlockHeader::set_gaslimit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gaslimit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.BlockHeader.gasLimit)
}
inline void BlockHeader::set_gaslimit(const void* value, size_t size) {
  
  gaslimit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.BlockHeader.gasLimit)
}
inline std::string* BlockHeader::_internal_mutable_gaslimit() {
  
  return gaslimit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader::release_gaslimit() {
  // @@protoc_insertion_point(field_release:protos.BlockHeader.gasLimit)
  
  return gaslimit_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_gaslimit(std::string* gaslimit) {
  if (gaslimit != nullptr) {
    
  } else {
    
  }
  gaslimit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gaslimit);
  // @@protoc_insertion_point(field_set_allocated:protos.BlockHeader.gasLimit)
}

// bytes gasUsed = 6;
inline void BlockHeader::clear_gasused() {
  gasused_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader::gasused() const {
  // @@protoc_insertion_point(field_get:protos.BlockHeader.gasUsed)
  return _internal_gasused();
}
inline void BlockHeader::set_gasused(const std::string& value) {
  _internal_set_gasused(value);
  // @@protoc_insertion_point(field_set:protos.BlockHeader.gasUsed)
}
inline std::string* BlockHeader::mutable_gasused() {
  // @@protoc_insertion_point(field_mutable:protos.BlockHeader.gasUsed)
  return _internal_mutable_gasused();
}
inline const std::string& BlockHeader::_internal_gasused() const {
  return gasused_.GetNoArena();
}
inline void BlockHeader::_internal_set_gasused(const std::string& value) {
  
  gasused_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockHeader::set_gasused(std::string&& value) {
  
  gasused_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.BlockHeader.gasUsed)
}
inline void BlockHeader::set_gasused(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gasused_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.BlockHeader.gasUsed)
}
inline void BlockHeader::set_gasused(const void* value, size_t size) {
  
  gasused_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.BlockHeader.gasUsed)
}
inline std::string* BlockHeader::_internal_mutable_gasused() {
  
  return gasused_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader::release_gasused() {
  // @@protoc_insertion_point(field_release:protos.BlockHeader.gasUsed)
  
  return gasused_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_gasused(std::string* gasused) {
  if (gasused != nullptr) {
    
  } else {
    
  }
  gasused_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gasused);
  // @@protoc_insertion_point(field_set_allocated:protos.BlockHeader.gasUsed)
}

// uint64 timestamp = 7;
inline void BlockHeader::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:protos.BlockHeader.timestamp)
  return _internal_timestamp();
}
inline void BlockHeader::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void BlockHeader::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:protos.BlockHeader.timestamp)
}

// bytes signature = 8;
inline void BlockHeader::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader::signature() const {
  // @@protoc_insertion_point(field_get:protos.BlockHeader.signature)
  return _internal_signature();
}
inline void BlockHeader::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:protos.BlockHeader.signature)
}
inline std::string* BlockHeader::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:protos.BlockHeader.signature)
  return _internal_mutable_signature();
}
inline const std::string& BlockHeader::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void BlockHeader::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockHeader::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.BlockHeader.signature)
}
inline void BlockHeader::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.BlockHeader.signature)
}
inline void BlockHeader::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.BlockHeader.signature)
}
inline std::string* BlockHeader::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader::release_signature() {
  // @@protoc_insertion_point(field_release:protos.BlockHeader.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:protos.BlockHeader.signature)
}

// uint64 shardId = 9;
inline void BlockHeader::clear_shardid() {
  shardid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::_internal_shardid() const {
  return shardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::shardid() const {
  // @@protoc_insertion_point(field_get:protos.BlockHeader.shardId)
  return _internal_shardid();
}
inline void BlockHeader::_internal_set_shardid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shardid_ = value;
}
inline void BlockHeader::set_shardid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shardid(value);
  // @@protoc_insertion_point(field_set:protos.BlockHeader.shardId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shard_2eproto
