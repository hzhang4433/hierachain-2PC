// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shard.proto

#include "shard.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_shard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockHeader_shard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KV_shard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shard_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_shard_2eproto;
namespace protos {
class SubPreCommitedDisTxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubPreCommitedDisTx> _instance;
} _SubPreCommitedDisTx_default_instance_;
class RLPWithReadSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RLPWithReadSet> _instance;
} _RLPWithReadSet_default_instance_;
class CommittedRLPWithReadSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommittedRLPWithReadSet> _instance;
} _CommittedRLPWithReadSet_default_instance_;
class KVDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KV> _instance;
} _KV_default_instance_;
class BlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Block> _instance;
} _Block_default_instance_;
class DAGWithReadSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DAGWithReadSet> _instance;
} _DAGWithReadSet_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class TxWithReadSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TxWithReadSet> _instance;
} _TxWithReadSet_default_instance_;
class CheckPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckPoint> _instance;
} _CheckPoint_default_instance_;
class ReadSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadSet> _instance;
} _ReadSet_default_instance_;
class CommitStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommitState> _instance;
} _CommitState_default_instance_;
class BlockHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockHeader> _instance;
} _BlockHeader_default_instance_;
}  // namespace protos
static void InitDefaultsscc_info_Block_shard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protos::_Block_default_instance_;
    new (ptr) ::protos::Block();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protos::Block::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Block_shard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Block_shard_2eproto}, {
      &scc_info_BlockHeader_shard_2eproto.base,
      &scc_info_Transaction_shard_2eproto.base,}};

static void InitDefaultsscc_info_BlockHeader_shard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protos::_BlockHeader_default_instance_;
    new (ptr) ::protos::BlockHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protos::BlockHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockHeader_shard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockHeader_shard_2eproto}, {}};

static void InitDefaultsscc_info_CheckPoint_shard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protos::_CheckPoint_default_instance_;
    new (ptr) ::protos::CheckPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protos::CheckPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckPoint_shard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckPoint_shard_2eproto}, {}};

static void InitDefaultsscc_info_CommitState_shard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protos::_CommitState_default_instance_;
    new (ptr) ::protos::CommitState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protos::CommitState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommitState_shard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommitState_shard_2eproto}, {}};

static void InitDefaultsscc_info_CommittedRLPWithReadSet_shard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protos::_CommittedRLPWithReadSet_default_instance_;
    new (ptr) ::protos::CommittedRLPWithReadSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protos::CommittedRLPWithReadSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommittedRLPWithReadSet_shard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommittedRLPWithReadSet_shard_2eproto}, {}};

static void InitDefaultsscc_info_DAGWithReadSet_shard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protos::_DAGWithReadSet_default_instance_;
    new (ptr) ::protos::DAGWithReadSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protos::DAGWithReadSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DAGWithReadSet_shard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DAGWithReadSet_shard_2eproto}, {
      &scc_info_KV_shard_2eproto.base,}};

static void InitDefaultsscc_info_KV_shard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protos::_KV_default_instance_;
    new (ptr) ::protos::KV();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protos::KV::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KV_shard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KV_shard_2eproto}, {}};

static void InitDefaultsscc_info_RLPWithReadSet_shard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protos::_RLPWithReadSet_default_instance_;
    new (ptr) ::protos::RLPWithReadSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protos::RLPWithReadSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RLPWithReadSet_shard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RLPWithReadSet_shard_2eproto}, {}};

static void InitDefaultsscc_info_ReadSet_shard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protos::_ReadSet_default_instance_;
    new (ptr) ::protos::ReadSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protos::ReadSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadSet_shard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadSet_shard_2eproto}, {
      &scc_info_KV_shard_2eproto.base,}};

static void InitDefaultsscc_info_SubPreCommitedDisTx_shard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protos::_SubPreCommitedDisTx_default_instance_;
    new (ptr) ::protos::SubPreCommitedDisTx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protos::SubPreCommitedDisTx::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubPreCommitedDisTx_shard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubPreCommitedDisTx_shard_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_shard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protos::_Transaction_default_instance_;
    new (ptr) ::protos::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protos::Transaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_shard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transaction_shard_2eproto}, {}};

static void InitDefaultsscc_info_TxWithReadSet_shard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protos::_TxWithReadSet_default_instance_;
    new (ptr) ::protos::TxWithReadSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protos::TxWithReadSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TxWithReadSet_shard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TxWithReadSet_shard_2eproto}, {
      &scc_info_KV_shard_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_shard_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_shard_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_shard_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_shard_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::SubPreCommitedDisTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protos::SubPreCommitedDisTx, subtxrlp_),
  PROTOBUF_FIELD_OFFSET(::protos::SubPreCommitedDisTx, contractaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::RLPWithReadSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protos::RLPWithReadSet, subtxrlp_),
  PROTOBUF_FIELD_OFFSET(::protos::RLPWithReadSet, readset_),
  PROTOBUF_FIELD_OFFSET(::protos::RLPWithReadSet, contractaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::CommittedRLPWithReadSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protos::CommittedRLPWithReadSet, subtxrlp_),
  PROTOBUF_FIELD_OFFSET(::protos::CommittedRLPWithReadSet, readset_),
  PROTOBUF_FIELD_OFFSET(::protos::CommittedRLPWithReadSet, contractaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::KV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protos::KV, key_),
  PROTOBUF_FIELD_OFFSET(::protos::KV, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protos::Block, blockheader_),
  PROTOBUF_FIELD_OFFSET(::protos::Block, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::DAGWithReadSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protos::DAGWithReadSet, blocknum_),
  PROTOBUF_FIELD_OFFSET(::protos::DAGWithReadSet, dagid_),
  PROTOBUF_FIELD_OFFSET(::protos::DAGWithReadSet, shardid_),
  PROTOBUF_FIELD_OFFSET(::protos::DAGWithReadSet, transactions_),
  PROTOBUF_FIELD_OFFSET(::protos::DAGWithReadSet, readset_),
  PROTOBUF_FIELD_OFFSET(::protos::DAGWithReadSet, readsetnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protos::Transaction, txid_),
  PROTOBUF_FIELD_OFFSET(::protos::Transaction, from_),
  PROTOBUF_FIELD_OFFSET(::protos::Transaction, to_),
  PROTOBUF_FIELD_OFFSET(::protos::Transaction, value_),
  PROTOBUF_FIELD_OFFSET(::protos::Transaction, data_),
  PROTOBUF_FIELD_OFFSET(::protos::Transaction, readers_),
  PROTOBUF_FIELD_OFFSET(::protos::Transaction, writers_),
  PROTOBUF_FIELD_OFFSET(::protos::Transaction, read_set_),
  PROTOBUF_FIELD_OFFSET(::protos::Transaction, read_write_set_),
  PROTOBUF_FIELD_OFFSET(::protos::Transaction, shardid_),
  PROTOBUF_FIELD_OFFSET(::protos::Transaction, dagid_),
  PROTOBUF_FIELD_OFFSET(::protos::Transaction, laststateindag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::TxWithReadSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protos::TxWithReadSet, txid_),
  PROTOBUF_FIELD_OFFSET(::protos::TxWithReadSet, dagid_),
  PROTOBUF_FIELD_OFFSET(::protos::TxWithReadSet, readset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::CheckPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protos::CheckPoint, checkpoint_id_),
  PROTOBUF_FIELD_OFFSET(::protos::CheckPoint, stateroot_),
  PROTOBUF_FIELD_OFFSET(::protos::CheckPoint, transactionsroot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::ReadSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protos::ReadSet, tx_idx_),
  PROTOBUF_FIELD_OFFSET(::protos::ReadSet, read_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::CommitState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protos::CommitState, blockid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::BlockHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protos::BlockHeader, parenthash_),
  PROTOBUF_FIELD_OFFSET(::protos::BlockHeader, stateroot_),
  PROTOBUF_FIELD_OFFSET(::protos::BlockHeader, transactionsroot_),
  PROTOBUF_FIELD_OFFSET(::protos::BlockHeader, number_),
  PROTOBUF_FIELD_OFFSET(::protos::BlockHeader, gaslimit_),
  PROTOBUF_FIELD_OFFSET(::protos::BlockHeader, gasused_),
  PROTOBUF_FIELD_OFFSET(::protos::BlockHeader, timestamp_),
  PROTOBUF_FIELD_OFFSET(::protos::BlockHeader, signature_),
  PROTOBUF_FIELD_OFFSET(::protos::BlockHeader, shardid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protos::SubPreCommitedDisTx)},
  { 7, -1, sizeof(::protos::RLPWithReadSet)},
  { 15, -1, sizeof(::protos::CommittedRLPWithReadSet)},
  { 23, -1, sizeof(::protos::KV)},
  { 30, -1, sizeof(::protos::Block)},
  { 37, -1, sizeof(::protos::DAGWithReadSet)},
  { 48, -1, sizeof(::protos::Transaction)},
  { 65, -1, sizeof(::protos::TxWithReadSet)},
  { 73, -1, sizeof(::protos::CheckPoint)},
  { 81, -1, sizeof(::protos::ReadSet)},
  { 88, -1, sizeof(::protos::CommitState)},
  { 94, -1, sizeof(::protos::BlockHeader)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protos::_SubPreCommitedDisTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protos::_RLPWithReadSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protos::_CommittedRLPWithReadSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protos::_KV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protos::_Block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protos::_DAGWithReadSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protos::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protos::_TxWithReadSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protos::_CheckPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protos::_ReadSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protos::_CommitState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protos::_BlockHeader_default_instance_),
};

const char descriptor_table_protodef_shard_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013shard.proto\022\006protos\"@\n\023SubPreCommitedD"
  "isTx\022\020\n\010subTxRlp\030\001 \001(\014\022\027\n\017contractAddres"
  "s\030\002 \001(\014\"L\n\016RLPWithReadSet\022\020\n\010subTxRlp\030\001 "
  "\001(\014\022\017\n\007readset\030\002 \001(\014\022\027\n\017contractAddress\030"
  "\003 \001(\014\"U\n\027CommittedRLPWithReadSet\022\020\n\010subT"
  "xRlp\030\001 \001(\014\022\017\n\007readset\030\002 \001(\014\022\027\n\017contractA"
  "ddress\030\003 \001(\014\" \n\002KV\022\013\n\003key\030\001 \001(\014\022\r\n\005value"
  "\030\002 \001(\014\"\\\n\005Block\022(\n\013blockHeader\030\001 \001(\0132\023.p"
  "rotos.BlockHeader\022)\n\014transactions\030\002 \003(\0132"
  "\023.protos.Transaction\"\211\001\n\016DAGWithReadSet\022"
  "\020\n\010blockNum\030\001 \001(\004\022\r\n\005dagId\030\002 \001(\004\022\017\n\007shar"
  "dId\030\003 \001(\004\022\024\n\014transactions\030\004 \003(\014\022\033\n\007readS"
  "et\030\005 \003(\0132\n.protos.KV\022\022\n\nreadSetNum\030\006 \001(\004"
  "\"\326\001\n\013Transaction\022\014\n\004txId\030\001 \001(\004\022\014\n\004from\030\002"
  " \001(\014\022\n\n\002to\030\003 \001(\014\022\r\n\005value\030\004 \001(\014\022\014\n\004data\030"
  "\005 \001(\014\022\017\n\007readers\030\006 \003(\004\022\017\n\007writers\030\007 \003(\004\022"
  "\020\n\010read_set\030\010 \003(\014\022\026\n\016read_write_set\030\t \003("
  "\014\022\017\n\007shardId\030\n \001(\004\022\r\n\005DAGId\030\013 \001(\004\022\026\n\016las"
  "tStateInDAG\030\014 \003(\014\"I\n\rTxWithReadSet\022\014\n\004tx"
  "Id\030\001 \001(\004\022\r\n\005dagId\030\002 \001(\004\022\033\n\007readSet\030\003 \003(\013"
  "2\n.protos.KV\"P\n\nCheckPoint\022\025\n\rcheckpoint"
  "_id\030\001 \001(\004\022\021\n\tstateRoot\030\002 \001(\014\022\030\n\020transact"
  "ionsRoot\030\003 \001(\014\"7\n\007ReadSet\022\016\n\006tx_idx\030\001 \001("
  "\004\022\034\n\010read_set\030\002 \003(\0132\n.protos.KV\"\036\n\013Commi"
  "tState\022\017\n\007blockid\030\001 \001(\004\"\270\001\n\013BlockHeader\022"
  "\022\n\nparentHash\030\001 \001(\014\022\021\n\tstateRoot\030\002 \001(\014\022\030"
  "\n\020transactionsRoot\030\003 \001(\014\022\016\n\006number\030\004 \001(\004"
  "\022\020\n\010gasLimit\030\005 \001(\014\022\017\n\007gasUsed\030\006 \001(\014\022\021\n\tt"
  "imestamp\030\007 \001(\004\022\021\n\tsignature\030\010 \001(\014\022\017\n\007sha"
  "rdId\030\t \001(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_shard_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_shard_2eproto_sccs[12] = {
  &scc_info_Block_shard_2eproto.base,
  &scc_info_BlockHeader_shard_2eproto.base,
  &scc_info_CheckPoint_shard_2eproto.base,
  &scc_info_CommitState_shard_2eproto.base,
  &scc_info_CommittedRLPWithReadSet_shard_2eproto.base,
  &scc_info_DAGWithReadSet_shard_2eproto.base,
  &scc_info_KV_shard_2eproto.base,
  &scc_info_RLPWithReadSet_shard_2eproto.base,
  &scc_info_ReadSet_shard_2eproto.base,
  &scc_info_SubPreCommitedDisTx_shard_2eproto.base,
  &scc_info_Transaction_shard_2eproto.base,
  &scc_info_TxWithReadSet_shard_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_shard_2eproto_once;
static bool descriptor_table_shard_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shard_2eproto = {
  &descriptor_table_shard_2eproto_initialized, descriptor_table_protodef_shard_2eproto, "shard.proto", 1178,
  &descriptor_table_shard_2eproto_once, descriptor_table_shard_2eproto_sccs, descriptor_table_shard_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_shard_2eproto::offsets,
  file_level_metadata_shard_2eproto, 12, file_level_enum_descriptors_shard_2eproto, file_level_service_descriptors_shard_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_shard_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_shard_2eproto), true);
namespace protos {

// ===================================================================

void SubPreCommitedDisTx::InitAsDefaultInstance() {
}
class SubPreCommitedDisTx::_Internal {
 public:
};

SubPreCommitedDisTx::SubPreCommitedDisTx()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.SubPreCommitedDisTx)
}
SubPreCommitedDisTx::SubPreCommitedDisTx(const SubPreCommitedDisTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subtxrlp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subtxrlp().empty()) {
    subtxrlp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subtxrlp_);
  }
  contractaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contractaddress().empty()) {
    contractaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contractaddress_);
  }
  // @@protoc_insertion_point(copy_constructor:protos.SubPreCommitedDisTx)
}

void SubPreCommitedDisTx::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubPreCommitedDisTx_shard_2eproto.base);
  subtxrlp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubPreCommitedDisTx::~SubPreCommitedDisTx() {
  // @@protoc_insertion_point(destructor:protos.SubPreCommitedDisTx)
  SharedDtor();
}

void SubPreCommitedDisTx::SharedDtor() {
  subtxrlp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubPreCommitedDisTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubPreCommitedDisTx& SubPreCommitedDisTx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubPreCommitedDisTx_shard_2eproto.base);
  return *internal_default_instance();
}


void SubPreCommitedDisTx::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.SubPreCommitedDisTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subtxrlp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SubPreCommitedDisTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes subTxRlp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_subtxrlp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes contractAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contractaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubPreCommitedDisTx::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.SubPreCommitedDisTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes subTxRlp = 1;
  if (this->subtxrlp().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_subtxrlp(), target);
  }

  // bytes contractAddress = 2;
  if (this->contractaddress().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_contractaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.SubPreCommitedDisTx)
  return target;
}

size_t SubPreCommitedDisTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.SubPreCommitedDisTx)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes subTxRlp = 1;
  if (this->subtxrlp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subtxrlp());
  }

  // bytes contractAddress = 2;
  if (this->contractaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contractaddress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubPreCommitedDisTx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.SubPreCommitedDisTx)
  GOOGLE_DCHECK_NE(&from, this);
  const SubPreCommitedDisTx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubPreCommitedDisTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.SubPreCommitedDisTx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.SubPreCommitedDisTx)
    MergeFrom(*source);
  }
}

void SubPreCommitedDisTx::MergeFrom(const SubPreCommitedDisTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.SubPreCommitedDisTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subtxrlp().size() > 0) {

    subtxrlp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subtxrlp_);
  }
  if (from.contractaddress().size() > 0) {

    contractaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contractaddress_);
  }
}

void SubPreCommitedDisTx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.SubPreCommitedDisTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubPreCommitedDisTx::CopyFrom(const SubPreCommitedDisTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.SubPreCommitedDisTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubPreCommitedDisTx::IsInitialized() const {
  return true;
}

void SubPreCommitedDisTx::InternalSwap(SubPreCommitedDisTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subtxrlp_.Swap(&other->subtxrlp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  contractaddress_.Swap(&other->contractaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SubPreCommitedDisTx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RLPWithReadSet::InitAsDefaultInstance() {
}
class RLPWithReadSet::_Internal {
 public:
};

RLPWithReadSet::RLPWithReadSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.RLPWithReadSet)
}
RLPWithReadSet::RLPWithReadSet(const RLPWithReadSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subtxrlp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subtxrlp().empty()) {
    subtxrlp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subtxrlp_);
  }
  readset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_readset().empty()) {
    readset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.readset_);
  }
  contractaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contractaddress().empty()) {
    contractaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contractaddress_);
  }
  // @@protoc_insertion_point(copy_constructor:protos.RLPWithReadSet)
}

void RLPWithReadSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RLPWithReadSet_shard_2eproto.base);
  subtxrlp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  readset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RLPWithReadSet::~RLPWithReadSet() {
  // @@protoc_insertion_point(destructor:protos.RLPWithReadSet)
  SharedDtor();
}

void RLPWithReadSet::SharedDtor() {
  subtxrlp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  readset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RLPWithReadSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RLPWithReadSet& RLPWithReadSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RLPWithReadSet_shard_2eproto.base);
  return *internal_default_instance();
}


void RLPWithReadSet::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.RLPWithReadSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subtxrlp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  readset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RLPWithReadSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes subTxRlp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_subtxrlp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes readset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_readset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes contractAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_contractaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RLPWithReadSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.RLPWithReadSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes subTxRlp = 1;
  if (this->subtxrlp().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_subtxrlp(), target);
  }

  // bytes readset = 2;
  if (this->readset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_readset(), target);
  }

  // bytes contractAddress = 3;
  if (this->contractaddress().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_contractaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.RLPWithReadSet)
  return target;
}

size_t RLPWithReadSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.RLPWithReadSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes subTxRlp = 1;
  if (this->subtxrlp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subtxrlp());
  }

  // bytes readset = 2;
  if (this->readset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_readset());
  }

  // bytes contractAddress = 3;
  if (this->contractaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contractaddress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RLPWithReadSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.RLPWithReadSet)
  GOOGLE_DCHECK_NE(&from, this);
  const RLPWithReadSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RLPWithReadSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.RLPWithReadSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.RLPWithReadSet)
    MergeFrom(*source);
  }
}

void RLPWithReadSet::MergeFrom(const RLPWithReadSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.RLPWithReadSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subtxrlp().size() > 0) {

    subtxrlp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subtxrlp_);
  }
  if (from.readset().size() > 0) {

    readset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.readset_);
  }
  if (from.contractaddress().size() > 0) {

    contractaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contractaddress_);
  }
}

void RLPWithReadSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.RLPWithReadSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RLPWithReadSet::CopyFrom(const RLPWithReadSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.RLPWithReadSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RLPWithReadSet::IsInitialized() const {
  return true;
}

void RLPWithReadSet::InternalSwap(RLPWithReadSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subtxrlp_.Swap(&other->subtxrlp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  readset_.Swap(&other->readset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  contractaddress_.Swap(&other->contractaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RLPWithReadSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommittedRLPWithReadSet::InitAsDefaultInstance() {
}
class CommittedRLPWithReadSet::_Internal {
 public:
};

CommittedRLPWithReadSet::CommittedRLPWithReadSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.CommittedRLPWithReadSet)
}
CommittedRLPWithReadSet::CommittedRLPWithReadSet(const CommittedRLPWithReadSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subtxrlp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subtxrlp().empty()) {
    subtxrlp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subtxrlp_);
  }
  readset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_readset().empty()) {
    readset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.readset_);
  }
  contractaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contractaddress().empty()) {
    contractaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contractaddress_);
  }
  // @@protoc_insertion_point(copy_constructor:protos.CommittedRLPWithReadSet)
}

void CommittedRLPWithReadSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommittedRLPWithReadSet_shard_2eproto.base);
  subtxrlp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  readset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommittedRLPWithReadSet::~CommittedRLPWithReadSet() {
  // @@protoc_insertion_point(destructor:protos.CommittedRLPWithReadSet)
  SharedDtor();
}

void CommittedRLPWithReadSet::SharedDtor() {
  subtxrlp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  readset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommittedRLPWithReadSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommittedRLPWithReadSet& CommittedRLPWithReadSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommittedRLPWithReadSet_shard_2eproto.base);
  return *internal_default_instance();
}


void CommittedRLPWithReadSet::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.CommittedRLPWithReadSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subtxrlp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  readset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CommittedRLPWithReadSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes subTxRlp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_subtxrlp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes readset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_readset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes contractAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_contractaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommittedRLPWithReadSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.CommittedRLPWithReadSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes subTxRlp = 1;
  if (this->subtxrlp().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_subtxrlp(), target);
  }

  // bytes readset = 2;
  if (this->readset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_readset(), target);
  }

  // bytes contractAddress = 3;
  if (this->contractaddress().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_contractaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.CommittedRLPWithReadSet)
  return target;
}

size_t CommittedRLPWithReadSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.CommittedRLPWithReadSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes subTxRlp = 1;
  if (this->subtxrlp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subtxrlp());
  }

  // bytes readset = 2;
  if (this->readset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_readset());
  }

  // bytes contractAddress = 3;
  if (this->contractaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contractaddress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommittedRLPWithReadSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.CommittedRLPWithReadSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CommittedRLPWithReadSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommittedRLPWithReadSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.CommittedRLPWithReadSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.CommittedRLPWithReadSet)
    MergeFrom(*source);
  }
}

void CommittedRLPWithReadSet::MergeFrom(const CommittedRLPWithReadSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.CommittedRLPWithReadSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subtxrlp().size() > 0) {

    subtxrlp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subtxrlp_);
  }
  if (from.readset().size() > 0) {

    readset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.readset_);
  }
  if (from.contractaddress().size() > 0) {

    contractaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contractaddress_);
  }
}

void CommittedRLPWithReadSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.CommittedRLPWithReadSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommittedRLPWithReadSet::CopyFrom(const CommittedRLPWithReadSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.CommittedRLPWithReadSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommittedRLPWithReadSet::IsInitialized() const {
  return true;
}

void CommittedRLPWithReadSet::InternalSwap(CommittedRLPWithReadSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subtxrlp_.Swap(&other->subtxrlp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  readset_.Swap(&other->readset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  contractaddress_.Swap(&other->contractaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CommittedRLPWithReadSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KV::InitAsDefaultInstance() {
}
class KV::_Internal {
 public:
};

KV::KV()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.KV)
}
KV::KV(const KV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:protos.KV)
}

void KV::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KV_shard_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KV::~KV() {
  // @@protoc_insertion_point(destructor:protos.KV)
  SharedDtor();
}

void KV::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KV& KV::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KV_shard_2eproto.base);
  return *internal_default_instance();
}


void KV::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.KV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* KV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KV::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.KV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.KV)
  return target;
}

size_t KV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.KV)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KV::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.KV)
  GOOGLE_DCHECK_NE(&from, this);
  const KV* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.KV)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.KV)
    MergeFrom(*source);
  }
}

void KV::MergeFrom(const KV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.KV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void KV::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.KV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KV::CopyFrom(const KV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.KV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KV::IsInitialized() const {
  return true;
}

void KV::InternalSwap(KV* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata KV::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Block::InitAsDefaultInstance() {
  ::protos::_Block_default_instance_._instance.get_mutable()->blockheader_ = const_cast< ::protos::BlockHeader*>(
      ::protos::BlockHeader::internal_default_instance());
}
class Block::_Internal {
 public:
  static const ::protos::BlockHeader& blockheader(const Block* msg);
};

const ::protos::BlockHeader&
Block::_Internal::blockheader(const Block* msg) {
  return *msg->blockheader_;
}
Block::Block()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_blockheader()) {
    blockheader_ = new ::protos::BlockHeader(*from.blockheader_);
  } else {
    blockheader_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protos.Block)
}

void Block::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Block_shard_2eproto.base);
  blockheader_ = nullptr;
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:protos.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  if (this != internal_default_instance()) delete blockheader_;
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Block& Block::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Block_shard_2eproto.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  if (GetArenaNoVirtual() == nullptr && blockheader_ != nullptr) {
    delete blockheader_;
  }
  blockheader_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protos.BlockHeader blockHeader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protos.Transaction transactions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protos.BlockHeader blockHeader = 1;
  if (this->has_blockheader()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::blockheader(this), target, stream);
  }

  // repeated .protos.Transaction transactions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.Block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protos.Transaction transactions = 2;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .protos.BlockHeader blockHeader = 1;
  if (this->has_blockheader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blockheader_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Block>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.Block)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  if (from.has_blockheader()) {
    _internal_mutable_blockheader()->::protos::BlockHeader::MergeFrom(from._internal_blockheader());
  }
}

void Block::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  swap(blockheader_, other->blockheader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DAGWithReadSet::InitAsDefaultInstance() {
}
class DAGWithReadSet::_Internal {
 public:
};

DAGWithReadSet::DAGWithReadSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.DAGWithReadSet)
}
DAGWithReadSet::DAGWithReadSet(const DAGWithReadSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      transactions_(from.transactions_),
      readset_(from.readset_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blocknum_, &from.blocknum_,
    static_cast<size_t>(reinterpret_cast<char*>(&readsetnum_) -
    reinterpret_cast<char*>(&blocknum_)) + sizeof(readsetnum_));
  // @@protoc_insertion_point(copy_constructor:protos.DAGWithReadSet)
}

void DAGWithReadSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DAGWithReadSet_shard_2eproto.base);
  ::memset(&blocknum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&readsetnum_) -
      reinterpret_cast<char*>(&blocknum_)) + sizeof(readsetnum_));
}

DAGWithReadSet::~DAGWithReadSet() {
  // @@protoc_insertion_point(destructor:protos.DAGWithReadSet)
  SharedDtor();
}

void DAGWithReadSet::SharedDtor() {
}

void DAGWithReadSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DAGWithReadSet& DAGWithReadSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DAGWithReadSet_shard_2eproto.base);
  return *internal_default_instance();
}


void DAGWithReadSet::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.DAGWithReadSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  readset_.Clear();
  ::memset(&blocknum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&readsetnum_) -
      reinterpret_cast<char*>(&blocknum_)) + sizeof(readsetnum_));
  _internal_metadata_.Clear();
}

const char* DAGWithReadSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 blockNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blocknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 dagId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dagid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 shardId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          shardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes transactions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transactions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protos.KV readSet = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_readset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 readSetNum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          readsetnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DAGWithReadSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.DAGWithReadSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blockNum = 1;
  if (this->blocknum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_blocknum(), target);
  }

  // uint64 dagId = 2;
  if (this->dagid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_dagid(), target);
  }

  // uint64 shardId = 3;
  if (this->shardid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_shardid(), target);
  }

  // repeated bytes transactions = 4;
  for (int i = 0, n = this->_internal_transactions_size(); i < n; i++) {
    const auto& s = this->_internal_transactions(i);
    target = stream->WriteBytes(4, s, target);
  }

  // repeated .protos.KV readSet = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_readset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_readset(i), target, stream);
  }

  // uint64 readSetNum = 6;
  if (this->readsetnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_readsetnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.DAGWithReadSet)
  return target;
}

size_t DAGWithReadSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.DAGWithReadSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes transactions = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(transactions_.size());
  for (int i = 0, n = transactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      transactions_.Get(i));
  }

  // repeated .protos.KV readSet = 5;
  total_size += 1UL * this->_internal_readset_size();
  for (const auto& msg : this->readset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 blockNum = 1;
  if (this->blocknum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blocknum());
  }

  // uint64 dagId = 2;
  if (this->dagid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dagid());
  }

  // uint64 shardId = 3;
  if (this->shardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_shardid());
  }

  // uint64 readSetNum = 6;
  if (this->readsetnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_readsetnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DAGWithReadSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.DAGWithReadSet)
  GOOGLE_DCHECK_NE(&from, this);
  const DAGWithReadSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DAGWithReadSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.DAGWithReadSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.DAGWithReadSet)
    MergeFrom(*source);
  }
}

void DAGWithReadSet::MergeFrom(const DAGWithReadSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.DAGWithReadSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  readset_.MergeFrom(from.readset_);
  if (from.blocknum() != 0) {
    _internal_set_blocknum(from._internal_blocknum());
  }
  if (from.dagid() != 0) {
    _internal_set_dagid(from._internal_dagid());
  }
  if (from.shardid() != 0) {
    _internal_set_shardid(from._internal_shardid());
  }
  if (from.readsetnum() != 0) {
    _internal_set_readsetnum(from._internal_readsetnum());
  }
}

void DAGWithReadSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.DAGWithReadSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DAGWithReadSet::CopyFrom(const DAGWithReadSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.DAGWithReadSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DAGWithReadSet::IsInitialized() const {
  return true;
}

void DAGWithReadSet::InternalSwap(DAGWithReadSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  readset_.InternalSwap(&other->readset_);
  swap(blocknum_, other->blocknum_);
  swap(dagid_, other->dagid_);
  swap(shardid_, other->shardid_);
  swap(readsetnum_, other->readsetnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DAGWithReadSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
}
class Transaction::_Internal {
 public:
};

Transaction::Transaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      readers_(from.readers_),
      writers_(from.writers_),
      read_set_(from.read_set_),
      read_write_set_(from.read_write_set_),
      laststateindag_(from.laststateindag_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&txid_, &from.txid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dagid_) -
    reinterpret_cast<char*>(&txid_)) + sizeof(dagid_));
  // @@protoc_insertion_point(copy_constructor:protos.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_shard_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&txid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dagid_) -
      reinterpret_cast<char*>(&txid_)) + sizeof(dagid_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:protos.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_shard_2eproto.base);
  return *internal_default_instance();
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  readers_.Clear();
  writers_.Clear();
  read_set_.Clear();
  read_write_set_.Clear();
  laststateindag_.Clear();
  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&txid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dagid_) -
      reinterpret_cast<char*>(&txid_)) + sizeof(dagid_));
  _internal_metadata_.Clear();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 txId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          txid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 readers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_readers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_readers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 writers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_writers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_writers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes read_set = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_read_set();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes read_write_set = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_read_write_set();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 shardId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          shardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 DAGId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          dagid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes lastStateInDAG = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_laststateindag();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 txId = 1;
  if (this->txid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_txid(), target);
  }

  // bytes from = 2;
  if (this->from().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_from(), target);
  }

  // bytes to = 3;
  if (this->to().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_to(), target);
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_value(), target);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  // repeated uint64 readers = 6;
  {
    int byte_size = _readers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          6, _internal_readers(), byte_size, target);
    }
  }

  // repeated uint64 writers = 7;
  {
    int byte_size = _writers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          7, _internal_writers(), byte_size, target);
    }
  }

  // repeated bytes read_set = 8;
  for (int i = 0, n = this->_internal_read_set_size(); i < n; i++) {
    const auto& s = this->_internal_read_set(i);
    target = stream->WriteBytes(8, s, target);
  }

  // repeated bytes read_write_set = 9;
  for (int i = 0, n = this->_internal_read_write_set_size(); i < n; i++) {
    const auto& s = this->_internal_read_write_set(i);
    target = stream->WriteBytes(9, s, target);
  }

  // uint64 shardId = 10;
  if (this->shardid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_shardid(), target);
  }

  // uint64 DAGId = 11;
  if (this->dagid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_dagid(), target);
  }

  // repeated bytes lastStateInDAG = 12;
  for (int i = 0, n = this->_internal_laststateindag_size(); i < n; i++) {
    const auto& s = this->_internal_laststateindag(i);
    target = stream->WriteBytes(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 readers = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->readers_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _readers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 writers = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->writers_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _writers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes read_set = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(read_set_.size());
  for (int i = 0, n = read_set_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      read_set_.Get(i));
  }

  // repeated bytes read_write_set = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(read_write_set_.size());
  for (int i = 0, n = read_write_set_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      read_write_set_.Get(i));
  }

  // repeated bytes lastStateInDAG = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(laststateindag_.size());
  for (int i = 0, n = laststateindag_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      laststateindag_.Get(i));
  }

  // bytes from = 2;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes to = 3;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 txId = 1;
  if (this->txid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_txid());
  }

  // uint64 shardId = 10;
  if (this->shardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_shardid());
  }

  // uint64 DAGId = 11;
  if (this->dagid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dagid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  readers_.MergeFrom(from.readers_);
  writers_.MergeFrom(from.writers_);
  read_set_.MergeFrom(from.read_set_);
  read_write_set_.MergeFrom(from.read_write_set_);
  laststateindag_.MergeFrom(from.laststateindag_);
  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.txid() != 0) {
    _internal_set_txid(from._internal_txid());
  }
  if (from.shardid() != 0) {
    _internal_set_shardid(from._internal_shardid());
  }
  if (from.dagid() != 0) {
    _internal_set_dagid(from._internal_dagid());
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  readers_.InternalSwap(&other->readers_);
  writers_.InternalSwap(&other->writers_);
  read_set_.InternalSwap(&other->read_set_);
  read_write_set_.InternalSwap(&other->read_write_set_);
  laststateindag_.InternalSwap(&other->laststateindag_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(txid_, other->txid_);
  swap(shardid_, other->shardid_);
  swap(dagid_, other->dagid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TxWithReadSet::InitAsDefaultInstance() {
}
class TxWithReadSet::_Internal {
 public:
};

TxWithReadSet::TxWithReadSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.TxWithReadSet)
}
TxWithReadSet::TxWithReadSet(const TxWithReadSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      readset_(from.readset_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&txid_, &from.txid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dagid_) -
    reinterpret_cast<char*>(&txid_)) + sizeof(dagid_));
  // @@protoc_insertion_point(copy_constructor:protos.TxWithReadSet)
}

void TxWithReadSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TxWithReadSet_shard_2eproto.base);
  ::memset(&txid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dagid_) -
      reinterpret_cast<char*>(&txid_)) + sizeof(dagid_));
}

TxWithReadSet::~TxWithReadSet() {
  // @@protoc_insertion_point(destructor:protos.TxWithReadSet)
  SharedDtor();
}

void TxWithReadSet::SharedDtor() {
}

void TxWithReadSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxWithReadSet& TxWithReadSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TxWithReadSet_shard_2eproto.base);
  return *internal_default_instance();
}


void TxWithReadSet::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.TxWithReadSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  readset_.Clear();
  ::memset(&txid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dagid_) -
      reinterpret_cast<char*>(&txid_)) + sizeof(dagid_));
  _internal_metadata_.Clear();
}

const char* TxWithReadSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 txId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          txid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 dagId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dagid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protos.KV readSet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_readset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TxWithReadSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.TxWithReadSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 txId = 1;
  if (this->txid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_txid(), target);
  }

  // uint64 dagId = 2;
  if (this->dagid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_dagid(), target);
  }

  // repeated .protos.KV readSet = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_readset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_readset(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.TxWithReadSet)
  return target;
}

size_t TxWithReadSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.TxWithReadSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protos.KV readSet = 3;
  total_size += 1UL * this->_internal_readset_size();
  for (const auto& msg : this->readset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 txId = 1;
  if (this->txid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_txid());
  }

  // uint64 dagId = 2;
  if (this->dagid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dagid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxWithReadSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.TxWithReadSet)
  GOOGLE_DCHECK_NE(&from, this);
  const TxWithReadSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TxWithReadSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.TxWithReadSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.TxWithReadSet)
    MergeFrom(*source);
  }
}

void TxWithReadSet::MergeFrom(const TxWithReadSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.TxWithReadSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  readset_.MergeFrom(from.readset_);
  if (from.txid() != 0) {
    _internal_set_txid(from._internal_txid());
  }
  if (from.dagid() != 0) {
    _internal_set_dagid(from._internal_dagid());
  }
}

void TxWithReadSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.TxWithReadSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxWithReadSet::CopyFrom(const TxWithReadSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.TxWithReadSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxWithReadSet::IsInitialized() const {
  return true;
}

void TxWithReadSet::InternalSwap(TxWithReadSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  readset_.InternalSwap(&other->readset_);
  swap(txid_, other->txid_);
  swap(dagid_, other->dagid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxWithReadSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckPoint::InitAsDefaultInstance() {
}
class CheckPoint::_Internal {
 public:
};

CheckPoint::CheckPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.CheckPoint)
}
CheckPoint::CheckPoint(const CheckPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stateroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stateroot().empty()) {
    stateroot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stateroot_);
  }
  transactionsroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transactionsroot().empty()) {
    transactionsroot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transactionsroot_);
  }
  checkpoint_id_ = from.checkpoint_id_;
  // @@protoc_insertion_point(copy_constructor:protos.CheckPoint)
}

void CheckPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckPoint_shard_2eproto.base);
  stateroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transactionsroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpoint_id_ = PROTOBUF_ULONGLONG(0);
}

CheckPoint::~CheckPoint() {
  // @@protoc_insertion_point(destructor:protos.CheckPoint)
  SharedDtor();
}

void CheckPoint::SharedDtor() {
  stateroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transactionsroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckPoint& CheckPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckPoint_shard_2eproto.base);
  return *internal_default_instance();
}


void CheckPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.CheckPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stateroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transactionsroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checkpoint_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CheckPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 checkpoint_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          checkpoint_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes stateRoot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stateroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes transactionsRoot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_transactionsroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.CheckPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 checkpoint_id = 1;
  if (this->checkpoint_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_checkpoint_id(), target);
  }

  // bytes stateRoot = 2;
  if (this->stateroot().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_stateroot(), target);
  }

  // bytes transactionsRoot = 3;
  if (this->transactionsroot().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_transactionsroot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.CheckPoint)
  return target;
}

size_t CheckPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.CheckPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes stateRoot = 2;
  if (this->stateroot().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stateroot());
  }

  // bytes transactionsRoot = 3;
  if (this->transactionsroot().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transactionsroot());
  }

  // uint64 checkpoint_id = 1;
  if (this->checkpoint_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_checkpoint_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.CheckPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.CheckPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.CheckPoint)
    MergeFrom(*source);
  }
}

void CheckPoint::MergeFrom(const CheckPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.CheckPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stateroot().size() > 0) {

    stateroot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stateroot_);
  }
  if (from.transactionsroot().size() > 0) {

    transactionsroot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transactionsroot_);
  }
  if (from.checkpoint_id() != 0) {
    _internal_set_checkpoint_id(from._internal_checkpoint_id());
  }
}

void CheckPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.CheckPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckPoint::CopyFrom(const CheckPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.CheckPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckPoint::IsInitialized() const {
  return true;
}

void CheckPoint::InternalSwap(CheckPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stateroot_.Swap(&other->stateroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transactionsroot_.Swap(&other->transactionsroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(checkpoint_id_, other->checkpoint_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadSet::InitAsDefaultInstance() {
}
class ReadSet::_Internal {
 public:
};

ReadSet::ReadSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.ReadSet)
}
ReadSet::ReadSet(const ReadSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      read_set_(from.read_set_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_idx_ = from.tx_idx_;
  // @@protoc_insertion_point(copy_constructor:protos.ReadSet)
}

void ReadSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadSet_shard_2eproto.base);
  tx_idx_ = PROTOBUF_ULONGLONG(0);
}

ReadSet::~ReadSet() {
  // @@protoc_insertion_point(destructor:protos.ReadSet)
  SharedDtor();
}

void ReadSet::SharedDtor() {
}

void ReadSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadSet& ReadSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadSet_shard_2eproto.base);
  return *internal_default_instance();
}


void ReadSet::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.ReadSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  read_set_.Clear();
  tx_idx_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ReadSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 tx_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tx_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protos.KV read_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_read_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.ReadSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_idx = 1;
  if (this->tx_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_idx(), target);
  }

  // repeated .protos.KV read_set = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_read_set_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_read_set(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.ReadSet)
  return target;
}

size_t ReadSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.ReadSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protos.KV read_set = 2;
  total_size += 1UL * this->_internal_read_set_size();
  for (const auto& msg : this->read_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 tx_idx = 1;
  if (this->tx_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.ReadSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.ReadSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.ReadSet)
    MergeFrom(*source);
  }
}

void ReadSet::MergeFrom(const ReadSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.ReadSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  read_set_.MergeFrom(from.read_set_);
  if (from.tx_idx() != 0) {
    _internal_set_tx_idx(from._internal_tx_idx());
  }
}

void ReadSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.ReadSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadSet::CopyFrom(const ReadSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.ReadSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadSet::IsInitialized() const {
  return true;
}

void ReadSet::InternalSwap(ReadSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  read_set_.InternalSwap(&other->read_set_);
  swap(tx_idx_, other->tx_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommitState::InitAsDefaultInstance() {
}
class CommitState::_Internal {
 public:
};

CommitState::CommitState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.CommitState)
}
CommitState::CommitState(const CommitState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blockid_ = from.blockid_;
  // @@protoc_insertion_point(copy_constructor:protos.CommitState)
}

void CommitState::SharedCtor() {
  blockid_ = PROTOBUF_ULONGLONG(0);
}

CommitState::~CommitState() {
  // @@protoc_insertion_point(destructor:protos.CommitState)
  SharedDtor();
}

void CommitState::SharedDtor() {
}

void CommitState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitState& CommitState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommitState_shard_2eproto.base);
  return *internal_default_instance();
}


void CommitState::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.CommitState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blockid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CommitState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 blockid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blockid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommitState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.CommitState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blockid = 1;
  if (this->blockid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_blockid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.CommitState)
  return target;
}

size_t CommitState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.CommitState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 blockid = 1;
  if (this->blockid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blockid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.CommitState)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommitState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.CommitState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.CommitState)
    MergeFrom(*source);
  }
}

void CommitState::MergeFrom(const CommitState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.CommitState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blockid() != 0) {
    _internal_set_blockid(from._internal_blockid());
  }
}

void CommitState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.CommitState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitState::CopyFrom(const CommitState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.CommitState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitState::IsInitialized() const {
  return true;
}

void CommitState::InternalSwap(CommitState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(blockid_, other->blockid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockHeader::InitAsDefaultInstance() {
}
class BlockHeader::_Internal {
 public:
};

BlockHeader::BlockHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protos.BlockHeader)
}
BlockHeader::BlockHeader(const BlockHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parenthash().empty()) {
    parenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parenthash_);
  }
  stateroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stateroot().empty()) {
    stateroot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stateroot_);
  }
  transactionsroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transactionsroot().empty()) {
    transactionsroot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transactionsroot_);
  }
  gaslimit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gaslimit().empty()) {
    gaslimit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gaslimit_);
  }
  gasused_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gasused().empty()) {
    gasused_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gasused_);
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&shardid_) -
    reinterpret_cast<char*>(&number_)) + sizeof(shardid_));
  // @@protoc_insertion_point(copy_constructor:protos.BlockHeader)
}

void BlockHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockHeader_shard_2eproto.base);
  parenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stateroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transactionsroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gaslimit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gasused_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shardid_) -
      reinterpret_cast<char*>(&number_)) + sizeof(shardid_));
}

BlockHeader::~BlockHeader() {
  // @@protoc_insertion_point(destructor:protos.BlockHeader)
  SharedDtor();
}

void BlockHeader::SharedDtor() {
  parenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stateroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transactionsroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gaslimit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gasused_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockHeader& BlockHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockHeader_shard_2eproto.base);
  return *internal_default_instance();
}


void BlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stateroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transactionsroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gaslimit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gasused_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shardid_) -
      reinterpret_cast<char*>(&number_)) + sizeof(shardid_));
  _internal_metadata_.Clear();
}

const char* BlockHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes parentHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_parenthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes stateRoot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stateroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes transactionsRoot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_transactionsroot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes gasLimit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_gaslimit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes gasUsed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_gasused();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 shardId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          shardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes parentHash = 1;
  if (this->parenthash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_parenthash(), target);
  }

  // bytes stateRoot = 2;
  if (this->stateroot().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_stateroot(), target);
  }

  // bytes transactionsRoot = 3;
  if (this->transactionsroot().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_transactionsroot(), target);
  }

  // uint64 number = 4;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_number(), target);
  }

  // bytes gasLimit = 5;
  if (this->gaslimit().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_gaslimit(), target);
  }

  // bytes gasUsed = 6;
  if (this->gasused().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_gasused(), target);
  }

  // uint64 timestamp = 7;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_timestamp(), target);
  }

  // bytes signature = 8;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_signature(), target);
  }

  // uint64 shardId = 9;
  if (this->shardid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_shardid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.BlockHeader)
  return target;
}

size_t BlockHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.BlockHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes parentHash = 1;
  if (this->parenthash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_parenthash());
  }

  // bytes stateRoot = 2;
  if (this->stateroot().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stateroot());
  }

  // bytes transactionsRoot = 3;
  if (this->transactionsroot().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transactionsroot());
  }

  // bytes gasLimit = 5;
  if (this->gaslimit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gaslimit());
  }

  // bytes gasUsed = 6;
  if (this->gasused().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gasused());
  }

  // bytes signature = 8;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // uint64 number = 4;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_number());
  }

  // uint64 timestamp = 7;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 shardId = 9;
  if (this->shardid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_shardid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protos.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protos.BlockHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protos.BlockHeader)
    MergeFrom(*source);
  }
}

void BlockHeader::MergeFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protos.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parenthash().size() > 0) {

    parenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parenthash_);
  }
  if (from.stateroot().size() > 0) {

    stateroot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stateroot_);
  }
  if (from.transactionsroot().size() > 0) {

    transactionsroot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transactionsroot_);
  }
  if (from.gaslimit().size() > 0) {

    gaslimit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gaslimit_);
  }
  if (from.gasused().size() > 0) {

    gasused_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gasused_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.shardid() != 0) {
    _internal_set_shardid(from._internal_shardid());
  }
}

void BlockHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protos.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {
  return true;
}

void BlockHeader::InternalSwap(BlockHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parenthash_.Swap(&other->parenthash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stateroot_.Swap(&other->stateroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transactionsroot_.Swap(&other->transactionsroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gaslimit_.Swap(&other->gaslimit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gasused_.Swap(&other->gasused_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(number_, other->number_);
  swap(timestamp_, other->timestamp_);
  swap(shardid_, other->shardid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protos::SubPreCommitedDisTx* Arena::CreateMaybeMessage< ::protos::SubPreCommitedDisTx >(Arena* arena) {
  return Arena::CreateInternal< ::protos::SubPreCommitedDisTx >(arena);
}
template<> PROTOBUF_NOINLINE ::protos::RLPWithReadSet* Arena::CreateMaybeMessage< ::protos::RLPWithReadSet >(Arena* arena) {
  return Arena::CreateInternal< ::protos::RLPWithReadSet >(arena);
}
template<> PROTOBUF_NOINLINE ::protos::CommittedRLPWithReadSet* Arena::CreateMaybeMessage< ::protos::CommittedRLPWithReadSet >(Arena* arena) {
  return Arena::CreateInternal< ::protos::CommittedRLPWithReadSet >(arena);
}
template<> PROTOBUF_NOINLINE ::protos::KV* Arena::CreateMaybeMessage< ::protos::KV >(Arena* arena) {
  return Arena::CreateInternal< ::protos::KV >(arena);
}
template<> PROTOBUF_NOINLINE ::protos::Block* Arena::CreateMaybeMessage< ::protos::Block >(Arena* arena) {
  return Arena::CreateInternal< ::protos::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::protos::DAGWithReadSet* Arena::CreateMaybeMessage< ::protos::DAGWithReadSet >(Arena* arena) {
  return Arena::CreateInternal< ::protos::DAGWithReadSet >(arena);
}
template<> PROTOBUF_NOINLINE ::protos::Transaction* Arena::CreateMaybeMessage< ::protos::Transaction >(Arena* arena) {
  return Arena::CreateInternal< ::protos::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::protos::TxWithReadSet* Arena::CreateMaybeMessage< ::protos::TxWithReadSet >(Arena* arena) {
  return Arena::CreateInternal< ::protos::TxWithReadSet >(arena);
}
template<> PROTOBUF_NOINLINE ::protos::CheckPoint* Arena::CreateMaybeMessage< ::protos::CheckPoint >(Arena* arena) {
  return Arena::CreateInternal< ::protos::CheckPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::protos::ReadSet* Arena::CreateMaybeMessage< ::protos::ReadSet >(Arena* arena) {
  return Arena::CreateInternal< ::protos::ReadSet >(arena);
}
template<> PROTOBUF_NOINLINE ::protos::CommitState* Arena::CreateMaybeMessage< ::protos::CommitState >(Arena* arena) {
  return Arena::CreateInternal< ::protos::CommitState >(arena);
}
template<> PROTOBUF_NOINLINE ::protos::BlockHeader* Arena::CreateMaybeMessage< ::protos::BlockHeader >(Arena* arena) {
  return Arena::CreateInternal< ::protos::BlockHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
